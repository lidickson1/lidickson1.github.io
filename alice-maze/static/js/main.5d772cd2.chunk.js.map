{"version":3,"sources":["CellType.js","Color.js","Directions.js","SolveButton.js","SizeChanger.js","TypeButtons.js","ArrowBoxes.js","SaveButton.js","LoadButton.js","Visit.js","Cell.js","Maze.js","SolveStep.js","Tabs.js","Restart.js","Levels.js","App.js","reportWebVitals.js","index.js"],"names":["cellType","NORMAL","START","GOAL","Colors","BLACK","name","value","RED","YELLOW","ColorButtons","props","onChange","bind","event","this","updateColor","target","id","Object","entries","map","index","color","type","checked","selected","disabled","readOnly","htmlFor","charAt","slice","toLowerCase","React","Component","directions","SolveButton","solve","solution","maze","start","find","element","CellType","queue","cell","stepSize","path","depth","visited","Map","solvedSteps","popped","length","current","shift","queueMap","set","y","size","x","push","arrows","arrow","neighbor_x","neighbor_y","neighbor_index","neighbor","has","get","includes","newPath","console","log","setSolution","className","onClick","SizeChanger","onInput","updateSize","parseInt","min","max","TypeButtons","updateCellType","ArrowBoxes","getInput","updateArrow","Form","Check","SaveButton","string","data","i","doArrows","toUpperCase","file","Blob","a","document","createElement","url","URL","createObjectURL","href","download","body","appendChild","click","setTimeout","removeChild","window","revokeObjectURL","LoadButton","getElementById","files","reader","FileReader","addEventListener","loadMaze","result","readAsText","accept","style","display","visitType","NOT_VISITED","VISITING","VISITED","ON_PATH","Cell","handleClick","handler","visit","VisitType","content","cellSize","getComputedStyle","querySelector","getPropertyValue","margin","stroke","fontSize","text","textLocations","0","1","2","3","4","5","6","7","direction","list","locations","Math","dominant-baseline","text-anchor","font-size","fill","stroke-width","font-weight","Array","from","values","xmlns","width","height","pointerEvents","viewBox","refX","refY","markerUnits","markerWidth","markerHeight","orient","d","x1","y1","x2","y2","strokeWidth","markerEnd","transform","backgroundColor","borderColor","Maze","updateSelected","maxDepth","mappedSolution","nextCell","some","adjacents","playedSteps","playedStep","key","filter","SolveStep","previous","next","getClass","step","updateStep","middle","updateStepButton","maxStep","undefined","aria-label","Tabs","selectTab","role","selectedTab","data-bs-toggle","data-bs-target","Restart","state","show","hide","setState","Button","variant","Modal","onHide","Header","closeButton","Title","Body","Footer","restart","levels","Levels","App","selectedCell","stepButton","solvedModal","noSolutionModal","newCell","updatePlayedStep","updatePlayedButton","setSelectedTab","setupPlay","getAdjacentCells","setProperty","findIndex","playedButton","rows","split","row","trim","startsWith","replace","cellData","isNaN","j","findCell","adjacentCell","updateCell","prev","add","edit","prevProps","prevState","tab","tabContent","class","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"qPAOeA,EAPE,CAEbC,OAAQ,EACRC,MAAO,EACPC,KAAM,G,eCFGC,EAAS,CAClBC,MAAO,CAAEC,KAAM,QAASC,MAAO,QAC/BC,IAAK,CAAEF,KAAM,MAAOC,MAAO,QAC3BE,OAAQ,CAAEH,KAAM,SAAUC,MAAO,YAS9B,IAAMG,EAAb,kDACI,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,SAAW,EAAKA,SAASC,KAAd,gBAFD,EADvB,4CAMI,SAASC,GAELC,KAAKJ,MAAMK,YAAYZ,EAAOU,EAAMG,OAAOC,OARnD,oBAWI,WAAU,IAAD,OACL,OACI,qBAAKN,SAAUG,KAAKH,SAApB,SACKO,OAAOC,QAAQhB,GAAQiB,KAAI,WAAgBC,GAAhB,uBAAEhB,EAAF,KAAQiB,EAAR,YACxB,gCACI,uBACIC,KAAK,QACLN,GAAIZ,EACJA,KAAK,QACLmB,QAC4B,OAAxB,EAAKd,MAAMe,UACX,EAAKf,MAAMe,SAASH,QAAUA,EAElCI,SAAkC,OAAxB,EAAKhB,MAAMe,SACrBE,UAAQ,IAEZ,uBAAOC,QAASvB,EAAhB,SACKA,EAAKwB,OAAO,GAAKxB,EAAKyB,MAAM,GAAGC,kBAb9BV,YAf9B,GAAkCW,IAAMC,WCHzBC,EAXI,CACf,CAAC,GAAI,GACL,CAAC,GAAI,GACL,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,EAAE,EAAG,GACL,EAAE,EAAG,GACL,EAAE,GAAI,IC2HKC,E,kDA7HX,WAAYzB,GAAQ,IAAD,8BACf,cAAMA,IACD0B,MAAQ,EAAKA,MAAMxB,KAAX,gBAFE,E,yCAKnB,WAeI,IAdA,IAUIyB,EAVEC,EAAOxB,KAAKJ,MAAM4B,KAClBC,EAAQD,EAAKE,MACf,SAACC,GAAD,OAAaA,EAAQ1C,WAAa2C,EAASzC,SAGzC0C,EAAQ,CAAC,CAAEC,KAAML,EAAOM,SAAU,EAAGC,KAAM,CAACP,GAAQQ,MAAO,IAC3DC,EAAU,IAAIC,IAGdC,EAAc,GAGhBH,EAAQ,EACRI,EAAS,GACNR,EAAMS,OAAS,GAAG,CACrB,IAAMC,EAAUV,EAAMW,QAEtB,GAAID,EAAQN,QAAUA,EAAO,CACzB,IADyB,EACnBQ,EAAW,IAAIN,IADI,cAEHE,GAFG,IAEzB,2BAA8B,CAAC,IAApBV,EAAmB,QAC1Bc,EAASC,IACLf,EAAQG,KAAKa,EAAI3C,KAAKJ,MAAMgD,KAAOjB,EAAQG,KAAKe,EAChDlB,IALiB,8BAQzBS,EAAYH,GAAS,CACjBJ,MAAOY,GAGXR,IAMJ,GAFAI,EAAOS,KAAKP,GAERA,EAAQT,KAAKtB,QAAUnB,EAAOI,IAC9B8C,EAAQR,gBACL,GAAIQ,EAAQT,KAAKtB,QAAUnB,EAAOK,SACrC6C,EAAQR,WACiB,IAArBQ,EAAQR,UACR,SA1Ba,oBAgCDQ,EAAQT,KAAKiB,QAhCZ,IAgCrB,2BAAyC,CAAC,IAA/BC,EAA8B,QAC/BC,EACFV,EAAQT,KAAKe,EAAIzB,EAAW4B,GAAO,GAAKT,EAAQR,SAC9CmB,EACFX,EAAQT,KAAKa,EAAIvB,EAAW4B,GAAO,GAAKT,EAAQR,SACpD,GACIkB,GAAc,GACdA,EAAajD,KAAKJ,MAAMgD,MACxBM,GAAc,GACdA,EAAalD,KAAKJ,MAAMgD,KAC1B,CACE,IAAMO,EACFD,EAAalD,KAAKJ,MAAMgD,KAAOK,EAC7BG,EAAW5B,EAAK2B,GACtB,GACIjB,EAAQmB,IAAId,EAAQR,WACpBG,EAAQoB,IAAIf,EAAQR,UAAUwB,SAASJ,GAGvC,SAECjB,EAAQmB,IAAId,EAAQR,WACrBG,EAAQQ,IAAIH,EAAQR,SAAU,IAElCG,EAAQoB,IAAIf,EAAQR,UAAUe,KAAKK,GACnC,IAAMK,EAAO,sBAAOjB,EAAQP,MAAf,CAAqBoB,IAClCvB,EAAMiB,KAAK,CACPhB,KAAMsB,EACNrB,SAAUQ,EAAQR,SAClBC,KAAK,GAAD,mBAAMO,EAAQP,MAAd,CAAoBoB,IACxBnB,MAAOM,EAAQN,MAAQ,IAEvBmB,EAASnE,WAAa2C,EAASxC,OAC/BmC,EAAWiC,KAjEF,+BAyEzB,IADA,IAAMf,EAAW,IAAIN,IACrB,MAAsBE,EAAtB,eAA8B,CAAzB,IAAMV,EAAO,KACdc,EAASC,IACLf,EAAQG,KAAKa,EAAI3C,KAAKJ,MAAMgD,KAAOjB,EAAQG,KAAKe,EAChDlB,GAGRS,EAAYH,GAAS,CACjBJ,MAAOY,GAGXgB,QAAQC,IAAItB,GAMZpC,KAAKJ,MAAM+D,YAAYvB,EAAab,K,oBAGxC,WACI,OACI,wBACId,KAAK,SACLmD,UAAU,kBACVC,QAAS7D,KAAKsB,MAHlB,uB,GAnHcJ,IAAMC,WC4BjB2C,E,kDA9BX,WAAYlE,GAAQ,IAAD,8BACf,cAAMA,IACDmE,QAAU,EAAKA,QAAQjE,KAAb,gBAFA,E,2CAKnB,SAAQC,GAGAA,EAAMG,OAAOV,OACbQ,KAAKJ,MAAMoE,WAAWC,SAASlE,EAAMG,OAAOV,U,oBAIpD,WACI,OACI,gCACI,uBAAOsB,QAAQ,OAAf,4BACA,uBACIL,KAAK,SACLN,GAAG,OACH+D,IAAI,IACJC,IAAI,KACJ3E,MAAOQ,KAAKJ,MAAMgD,KAClB/C,SAAUG,KAAK+D,iB,GAxBT7C,IAAMC,WCqCjBiD,E,kDAnCX,WAAYxE,GAAQ,IAAD,8BACf,cAAMA,IACDC,SAAW,EAAKA,SAASC,KAAd,gBAFD,E,4CAKnB,SAASC,GACLC,KAAKJ,MAAMyE,eAAezC,EAAS7B,EAAMG,OAAOC,O,oBAGpD,WAAU,IAAD,OACL,OACI,qBAAKN,SAAUG,KAAKH,SAApB,SACKO,OAAOC,QAAQuB,GAAUtB,KAAI,WAAgBC,GAAhB,uBAAEhB,EAAF,KAAQC,EAAR,YAC1B,gCACI,uBACIiB,KAAK,QACLN,GAAIZ,EACJA,KAAK,WACLmB,QAC4B,OAAxB,EAAKd,MAAMe,UACX,EAAKf,MAAMe,SAAS1B,WAAaO,EAErCoB,SAAkC,OAAxB,EAAKhB,MAAMe,SACrBE,UAAQ,IAEZ,uBAAOC,QAASvB,EAAhB,SACKA,EAAKwB,OAAO,GAAKxB,EAAKyB,MAAM,GAAGC,kBAb9BV,Y,GAdJW,IAAMC,W,QCyEjBmD,E,kDAvEX,WAAY1E,GAAQ,IAAD,8BACf,cAAMA,IACD2E,SAAW,EAAKA,SAASzE,KAAd,gBAChB,EAAKD,SAAW,EAAKA,SAASC,KAAd,gBAHD,E,4CAMnB,SAASK,EAAIO,GAETV,KAAKJ,MAAM4E,YAAYrE,EAAIO,K,sBAG/B,SAASH,GAAQ,IAAD,OACZ,OAgBI,aAfA,CAeCkE,EAAA,EAAKC,MAAN,CACIjE,KAAK,WACLN,GAAII,EAEJG,QAC4B,OAAxBV,KAAKJ,MAAMe,UACXX,KAAKJ,MAAMe,SAAS1B,WAAa2C,EAASxC,MAC1CY,KAAKJ,MAAMe,SAASoC,OAAOQ,SAAShD,GAExCK,SAC4B,OAAxBZ,KAAKJ,MAAMe,UACXX,KAAKJ,MAAMe,SAAS1B,WAAa2C,EAASxC,KAE9CS,SAAU,SAACE,GAAD,OAAW,EAAKF,SAASU,EAAOR,EAAMG,OAAOQ,UACvDG,UAAQ,M,oBAKpB,WACI,OACI,gCACI,wCACA,sBAAK+C,UAAU,MAAf,UACI,qBAAKA,UAAU,QAAf,SAAwB5D,KAAKuE,SAAS,KACtC,qBAAKX,UAAU,QAAf,SAAwB5D,KAAKuE,SAAS,KACtC,qBAAKX,UAAU,QAAf,SAAwB5D,KAAKuE,SAAS,QAE1C,sBAAKX,UAAU,MAAf,UACI,qBAAKA,UAAU,QAAf,SAAwB5D,KAAKuE,SAAS,KACtC,qBAAKX,UAAU,UACf,qBAAKA,UAAU,QAAf,SAAwB5D,KAAKuE,SAAS,QAE1C,sBAAKX,UAAU,MAAf,UACI,qBAAKA,UAAU,QAAf,SAAwB5D,KAAKuE,SAAS,KACtC,qBAAKX,UAAU,QAAf,SAAwB5D,KAAKuE,SAAS,KACtC,qBAAKX,UAAU,QAAf,SAAwB5D,KAAKuE,SAAS,e,GAjEjCrD,IAAMC,WCgEhBwD,E,kDA/DX,WAAY/E,GAAQ,IAAD,8BACf,cAAMA,IACDiE,QAAU,EAAKA,QAAQ/D,KAAb,gBAFA,E,2CAKnB,WAGI,IAFA,IAAI8E,EAAS,GACPC,EAAO7E,KAAKJ,MAAMiF,KACfC,EAAI,EAAGA,EAAID,EAAKvC,OAAQwC,IAAK,CAClC,IAAIC,GAAW,EASf,GARIF,EAAKC,GAAG7F,WAAa2C,EAASzC,OAC9ByF,GAAU,IACVG,GAAW,GACJF,EAAKC,GAAG7F,WAAa2C,EAAS1C,OACrC6F,GAAW,EACJF,EAAKC,GAAG7F,WAAa2C,EAASxC,OACrCwF,GAAU,KAEVG,EACA,GAA8B,IAA1BF,EAAKC,GAAG/B,OAAOT,OACfsC,GAAU,QACP,CACCC,EAAKC,GAAGtE,QAAUnB,EAAOC,QACzBsF,GAAUC,EAAKC,GAAGtE,MAAMjB,KAAKyF,cAAcjE,OAAO,IAFnD,oBAIiB8D,EAAKC,GAAG/B,QAJzB,IAIH,2BAAoC,CAChC6B,GADgC,SAJjC,gCASNE,EAAI,GAAK9E,KAAKJ,MAAMgD,OAAS,EAC9BgC,GAAU,KAEVA,GAAU,IAIlB,IAAIK,EAAO,IAAIC,KAAK,CAACN,GAAS,CAAEnE,KAAM,eAClC0E,EAAIC,SAASC,cAAc,KAC3BC,EAAMC,IAAIC,gBAAgBP,GAC9BE,EAAEM,KAAOH,EACTH,EAAEO,SAAW,WACbN,SAASO,KAAKC,YAAYT,GAC1BA,EAAEU,QACFC,YAAW,WACPV,SAASO,KAAKI,YAAYZ,GAC1Ba,OAAOT,IAAIU,gBAAgBX,KAC5B,K,oBAGP,WACI,OACI,wBACI7E,KAAK,SACLmD,UAAU,0BACVC,QAAS7D,KAAK6D,QAHlB,sB,GArDa3C,IAAMC,WCyChB+E,E,kDA1CX,WAAYtG,GAAQ,IAAD,8BACf,cAAMA,IACDiE,QAAU,EAAKA,QAAQ/D,KAAb,gBACf,EAAKD,SAAW,EAAKA,SAASC,KAAd,gBAHD,E,2CAMnB,WACIsF,SAASe,eAAe,aAAaN,U,sBAGzC,SAAS9F,GAAQ,IAAD,OAENkF,EAAOlF,EAAMG,OAAOkG,MAAM,GAC1BC,EAAS,IAAIC,WACnBD,EAAOE,iBAAiB,QAAQ,SAACxG,GAC7B,EAAKH,MAAM4G,SAASzG,EAAMG,OAAOuG,WAErCJ,EAAOK,WAAWzB,K,oBAGtB,WACI,OACI,gCACI,wBACIxE,KAAK,SACLmD,UAAU,kBACVC,QAAS7D,KAAK6D,QAHlB,kBAOA,uBACI1D,GAAG,YACHM,KAAK,OACLkG,OAAO,OACPC,MAAO,CAAEC,QAAS,QAClBhH,SAAUG,KAAKH,kB,GApCVqB,IAAMC,WCKhB2F,EAPG,CACdC,YAAa,EACbC,SAAU,EACVC,QAAS,EACTC,QAAS,GCAQC,E,kDACjB,WAAYvH,GAAQ,IAAD,8BACf,cAAMA,IACDwH,YAAc,EAAKA,YAAYtH,KAAjB,gBAFJ,E,+CAKnB,WAIIE,KAAKJ,MAAMyH,QAAQrH,KAAKJ,MAAMiD,EAAG7C,KAAKJ,MAAM+C,K,oBAGhD,WAAU,IAGFnC,EAHC,OAKDA,EADAR,KAAKJ,MAAMX,WAAa2C,EAASzC,MACzB,UACDa,KAAKJ,MAAM0H,QAAUC,EAAUP,SAC9B,UACDhH,KAAKJ,MAAM0H,QAAUC,EAAUL,QAC9B,UACDlH,KAAKJ,MAAM0H,QAAUC,EAAUN,QAC9B,UACDjH,KAAKJ,MAAMiD,EAAI,IAAM7C,KAAKJ,MAAM+C,EAAI,EACnC,UAEA,UAGZ,IAoFI6E,EApFEC,EAAWxD,SACbyD,iBAAiBtC,SAASuC,cAAc,UAAUC,iBAC9C,gBAIFC,EAAoB,IAAXJ,EACTK,EAAoB,IAAXL,EACTM,EAAW,GAEXC,EAAO,GAEPC,EAAgB,CAClBC,EAAG,CACC,CAACT,EAAW,EAAGI,GACf,CAACJ,EAAW,EAAIM,EAAUF,GAC1B,CAACJ,EAAW,EAAIM,EAAUF,IAE9BM,EAAG,CACC,CAACV,EAAWI,EAAQA,GACpB,CAACJ,EAAWI,EAASE,EAAUF,GAC/B,CAACJ,EAAWI,EAAQA,EAASE,IAEjCK,EAAG,CACC,CAACX,EAAWI,EAAQJ,EAAW,GAC/B,CAACA,EAAWI,EAAQJ,EAAW,EAAIM,GACnC,CAACN,EAAWI,EAAQJ,EAAW,EAAIM,IAEvCM,EAAG,CACC,CAACZ,EAAWI,EAAQJ,EAAWI,GAC/B,CAACJ,EAAWI,EAAQJ,EAAWI,EAASE,GACxC,CAACN,EAAWI,EAASE,EAAUN,EAAWI,IAE9CS,EAAG,CACC,CAACb,EAAW,EAAGA,EAAWI,GAC1B,CAACJ,EAAW,EAAIM,EAAUN,EAAWI,GACrC,CAACJ,EAAW,EAAIM,EAAUN,EAAWI,IAEzCU,EAAG,CACC,CAACV,EAAQJ,EAAWI,GACpB,CAACA,EAAQJ,EAAWI,EAASE,GAC7B,CAACF,EAASE,EAAUN,EAAWI,IAEnCW,EAAG,CACC,CAACX,EAAQJ,EAAW,GACpB,CAACI,EAAQJ,EAAW,EAAIM,GACxB,CAACF,EAAQJ,EAAW,EAAIM,IAE5BU,EAAG,CACC,CAACZ,EAAQA,GACT,CAACA,EAASE,EAAUF,GACpB,CAACA,EAAQA,EAASE,KAG1B,GAA4B,OAAxB/H,KAAKJ,MAAM2B,SAAmB,qBAEEvB,KAAKJ,MAAM2B,UAFb,IAE9B,2BAAqD,CAAC,IAAD,yBAAzCmH,EAAyC,KAA9BC,EAA8B,KACjD,GAAIA,EAAKrG,OAAS,EAEd,IADA,IAAMsG,EAAYX,EAAcS,GAExB5D,EAAI,EACRA,EAAI+D,KAAK3E,IAAI0E,EAAUtG,OAAQqG,EAAKrG,QACpCwC,IAEAkD,EAAKlF,KACD,sBACID,EAAG+F,EAAU9D,GAAG,GAChBnC,EAAGiG,EAAU9D,GAAG,GAChBgE,oBAAkB,SAClBC,cAAY,SACZC,YAAU,KACVC,KAAK,QACLnB,OAAO,QACPoB,eAAa,MACbC,cAAY,OAThB,SAWKR,EAAK7D,GAAGA,MAtBC,+BAgIlC,OAhGI0C,EADAxH,KAAKJ,MAAMX,WAAa2C,EAASxC,KAE7B,QACyB,OAAxBY,KAAKJ,MAAM2B,SACN,GACA,IACA6H,MAAMC,KAAKrJ,KAAKJ,MAAM2B,SAAS+H,UAAU5H,MACrC,SAACiH,GAAD,OAAUA,EAAKrG,OAAS,KAC1B,GAAGwC,GAGX,sBACIyE,MAAM,6BACNC,MAAO/B,EACPgC,OAAQhC,EAGRb,MAAO,CAAE8C,cAAe,QAN5B,UAQI,iCAEI,wBACIvJ,GAAG,kBACHwJ,QAAQ,YACRC,KAAK,IACLC,KAAK,IACLC,YAAY,cACZC,YAAY,KACZC,aAAa,KACbC,OAAO,OARX,SAUI,sBAAMC,EAAE,wBAAwBjB,KAAK,WAEzC,wBACI9I,GAAG,gBACHwJ,QAAQ,YACRC,KAAK,IACLC,KAAK,IACLC,YAAY,cACZC,YAAY,KACZC,aAAa,KACbC,OAAO,OARX,SAUI,sBAAMC,EAAE,wBAAwBjB,KAAK,WAEzC,wBACI9I,GAAG,mBACHwJ,QAAQ,YACRC,KAAK,IACLC,KAAK,IACLC,YAAY,cACZC,YAAY,KACZC,aAAa,KACbC,OAAO,OARX,SAUI,sBAAMC,EAAE,wBAAwBjB,KAAK,iBAI5CjJ,KAAKJ,MAAMmD,OAAOzC,KAAI,SAAC0C,EAAOzC,GAAR,OACnB,sBACI4J,GAAI1C,EAAW,EACf2C,GACI,EAAKxK,MAAMmD,OAAOT,OAAS,EACrBmF,EAAW,EACXA,EAAWI,EAErBwC,GAAI5C,EAAW,EACf6C,GAAIzC,EACJC,OAAQ,EAAKlI,MAAMY,MAAMhB,MACzB+K,YAAazC,EACb0C,UACI,kBAAoB,EAAK5K,MAAMY,MAAMjB,KAAO,IAEhDkL,UACI,UACQ,GAARzH,EACA,IACAyE,EAAW,EACX,IACAA,EAAW,EACX,KAEClH,MAGZyH,KAYT,qBACIpE,UAAU,OACVC,QAAS7D,KAAKoH,YACdR,MAAO,CACH8D,gBAAiBlK,EACjBmK,YAAa3K,KAAKJ,MAAMe,SAAW,OAAS,SALpD,SAWK6G,Q,GAjOiBtG,IAAMC,WCsJzByJ,E,kDArJX,WAAYhL,GAAQ,IAAD,8BACf,cAAMA,IACDyH,QAAU,EAAKA,QAAQvH,KAAb,gBAFA,E,2CAKnB,SAAQ+C,EAAGF,GACP3C,KAAKJ,MAAMiL,eAAehI,EAAGF,K,oBAGjC,WAAU,IAAD,OACDmI,EAAW,EACTC,EAAiB,IAAI5I,IAC3B,GAAyB,OAArBnC,KAAKJ,MAAMiC,MAAgB,CAAC,IAAD,gBACR7B,KAAKJ,MAAMiC,MAAMyH,UADT,IAC3B,2BAA8C,CAAC,IAApCxH,EAAmC,QACtCA,EAAKG,MAAQ6I,IACbA,EAAWhJ,EAAKG,QAHG,8BAM3B,IAAK,IAAI6C,EAAI,EAAGA,EAAI9E,KAAKJ,MAAM2B,SAASe,OAAQwC,IAAK,CACjD,IAAMvC,EAAUvC,KAAKJ,MAAM2B,SAASuD,GAChC4D,EAAY,EAChB,GAAI5D,EAAI9E,KAAKJ,MAAM2B,SAASe,OAAS,EAAG,CACpC,IAAM0I,EAAWhL,KAAKJ,MAAM2B,SAASuD,EAAI,GAErC4D,EADAsC,EAASrI,EAAIJ,EAAQI,GAAKqI,EAASnI,IAAMN,EAAQM,EACrC,EAEZmI,EAASrI,EAAIJ,EAAQI,GACrBqI,EAASnI,EAAIN,EAAQM,EAET,EAEZmI,EAASrI,IAAMJ,EAAQI,GACvBqI,EAASnI,EAAIN,EAAQM,EAET,EAEZmI,EAASrI,EAAIJ,EAAQI,GACrBqI,EAASnI,EAAIN,EAAQM,EAET,EAEZmI,EAASrI,EAAIJ,EAAQI,GACrBqI,EAASnI,IAAMN,EAAQM,EAEX,EAEZmI,EAASrI,EAAIJ,EAAQI,GACrBqI,EAASnI,EAAIN,EAAQM,EAET,EAEZmI,EAASrI,IAAMJ,EAAQI,GACvBqI,EAASnI,EAAIN,EAAQM,EAET,EAEA,EAGfkI,EAAe1H,IAAIqF,IACpBqC,EAAerI,IAAIgG,EAAW,IAElCqC,EAAezH,IAAIoF,GAAW5F,KAA9B,2BACOP,GADP,IAEIuC,EAAGA,EACH4D,UAAWA,KAGnBjF,QAAQC,IAAIqH,GAEhB,OACI,qBAAKnH,UAAU,OAAf,SACK5D,KAAKJ,MAAMiF,KAAKvE,KAAI,SAACV,EAAOW,GACzB,IAAI+G,EAAQC,EAAUR,YA0CtB,OAzCyB,OAArB,EAAKnH,MAAMiC,OAEP,EAAKjC,MAAMiC,MAAMwB,IAAI9C,KAIjB+G,EAFA,EAAK1H,MAAMiC,MAAMyB,IAAI/C,GAAO0B,QAAU6I,EAE9BvD,EAAUP,SAMlB,EAAKpH,MAAM2B,SAAS0J,MAChB,SAACtJ,GAAD,OACIA,EAAQkB,IAAMjD,EAAMiD,GACpBlB,EAAQgB,IAAM/C,EAAM+C,KAGpB4E,EAAUL,QAEVK,EAAUN,SAKD,OAAzB,EAAKrH,MAAMsL,WACX,EAAKtL,MAAMsL,UAAUD,MACjB,SAACtJ,GAAD,OACIA,EAAQkB,IAAMjD,EAAMiD,GAAKlB,EAAQgB,IAAM/C,EAAM+C,KAGrD2E,EAAQC,EAAUP,SAES,OAA3B,EAAKpH,MAAMuL,aACX,EAAKvL,MAAMuL,YACNnK,MAAM,EAAG,EAAKpB,MAAMwL,WAAa,GACjC9K,KAAI,SAACqB,GAAD,OAAaA,EAAQ,MACzB4B,SAAShD,KAEd+G,EAAQC,EAAUL,SAGlB,wBAAC,EAAD,2BACQtH,GADR,IAEIyL,IAAK9K,EACLI,SAC4B,OAAxB,EAAKf,MAAMe,UACX,EAAKf,MAAMe,WAAaJ,EAE5B8G,QAAS,EAAKA,QACdC,MAAOA,EACP/F,SAC4B,OAAxB,EAAK3B,MAAM2B,UACV+F,IAAUC,EAAUL,SACjBI,IAAUC,EAAUP,SAWlB,KAVA,IAAI7E,IACA,YAAI4I,GAAgBzK,KAAI,yCAAY,CAAZ,UAElBgL,QACE,SAAC3J,GAAD,OACIA,EAAQkB,IAAMjD,EAAMiD,GACpBlB,EAAQgB,IAAM/C,EAAM+C,sB,GAxIvDzB,IAAMC,WCwGVoK,E,kDAzGX,WAAY3L,GAAQ,IAAD,8BACf,cAAMA,IACDiE,QAAU,EAAKA,QAAQ/D,KAAb,gBACf,EAAK0L,SAAW,EAAKA,SAAS1L,KAAd,gBAChB,EAAK2L,KAAO,EAAKA,KAAK3L,KAAV,gBACZ,EAAK4L,SAAW,EAAKA,SAAS5L,KAAd,gBALD,E,2CAQnB,SAAQ6L,GACJ3L,KAAKJ,MAAMgM,WAAWD,K,sBAG1B,WACQ3L,KAAKJ,MAAM+L,KAAO,GAClB3L,KAAKJ,MAAMgM,WAAW5L,KAAKJ,MAAM+L,KAAO,GAExC3L,KAAKJ,MAAMiM,OAAS,GAAK7L,KAAKJ,MAAM+L,KAAO3L,KAAKJ,MAAMiM,QACtD7L,KAAKJ,MAAMkM,iBAAiB9L,KAAKJ,MAAMiM,OAAS,K,kBAIxD,WACQ7L,KAAKJ,MAAM+L,KAAO3L,KAAKJ,MAAMmM,SAC7B/L,KAAKJ,MAAMgM,WAAW5L,KAAKJ,MAAM+L,KAAO,GAGxC3L,KAAKJ,MAAMiM,OAAS7L,KAAKJ,MAAMmM,QAAU,GACzC/L,KAAKJ,MAAM+L,KAAO3L,KAAKJ,MAAMiM,QAE7B7L,KAAKJ,MAAMkM,iBAAiB9L,KAAKJ,MAAMiM,OAAS,K,sBAIxD,SAASrM,GACL,YAAwBwM,IAApBhM,KAAKJ,MAAM+L,MAAsB3L,KAAKJ,MAAMmM,QAAUvM,EAC/C,gBACoBwM,IAApBhM,KAAKJ,MAAM+L,MAAsB3L,KAAKJ,MAAM+L,OAASnM,EACrD,SAEA,K,oBAIf,WAAU,IAAD,OACL,OACI,qBAAKyM,aAAW,0BAAhB,SACI,qBAAIrI,UAAU,aAAd,UACI,oBAAIA,UAAU,YAAd,SACI,wBAAQA,UAAU,YAAYC,QAAS7D,KAAKwL,SAA5C,wBAIJ,oBACI5H,UACI,aAAe5D,KAAK0L,SAAS1L,KAAKJ,MAAMiM,OAAS,GAFzD,SAKI,wBACIjI,UAAU,YACVC,QAAS,kBAAM,EAAKA,QAAQ,EAAKjE,MAAMiM,OAAS,IAFpD,cAIyBG,IAApBhM,KAAKJ,MAAM+L,KACN,EACA3L,KAAKJ,MAAMiM,OAAS,MAGlC,oBACIjI,UACI,aAAe5D,KAAK0L,SAAS1L,KAAKJ,MAAMiM,QAFhD,SAKI,wBACIjI,UAAU,YACVC,QAAS,kBAAM,EAAKA,QAAQ,EAAKjE,MAAMiM,SAF3C,cAIyBG,IAApBhM,KAAKJ,MAAM+L,KACN,EACA3L,KAAKJ,MAAMiM,WAGzB,oBACIjI,UACI,aAAe5D,KAAK0L,SAAS1L,KAAKJ,MAAMiM,OAAS,GAFzD,SAKI,wBACIjI,UAAU,YACVC,QAAS,kBAAM,EAAKA,QAAQ,EAAKjE,MAAMiM,OAAS,IAFpD,cAIyBG,IAApBhM,KAAKJ,MAAM+L,KACN,EACA3L,KAAKJ,MAAMiM,OAAS,MAGlC,oBAAIjI,UAAU,YAAd,SACI,wBAAQA,UAAU,YAAYC,QAAS7D,KAAKyL,KAA5C,6B,GAhGAvK,IAAMC,WCwEf+K,E,kDAvEX,WAAYtM,GAAQ,IAAD,8BACf,cAAMA,IACDiE,QAAU,EAAKA,QAAQ/D,KAAb,gBAFA,E,2CAKnB,SAAQK,GACJH,KAAKJ,MAAMuM,UAAUhM,K,oBAGzB,WAAU,IAAD,OACL,OACI,qBAAIyD,UAAU,eAAezD,GAAG,QAAQiM,KAAK,UAA7C,UACI,oBAAIxI,UAAU,WAAWwI,KAAK,eAA9B,SACI,wBACIxI,UACI,YAC4B,SAA3B5D,KAAKJ,MAAMyM,YAAyB,UAAY,IAErDlM,GAAG,WACHmM,iBAAe,MACfC,iBAAe,QACf9L,KAAK,SACL2L,KAAK,MAGLvI,QAAS,kBAAM,EAAKA,QAAQ,SAZhC,oBAiBJ,oBAAID,UAAU,WAAWwI,KAAK,eAA9B,SACI,wBACIxI,UACI,YAC4B,SAA3B5D,KAAKJ,MAAMyM,YAAyB,UAAY,IAErDlM,GAAG,WACHmM,iBAAe,MACfC,iBAAe,QACf9L,KAAK,SACL2L,KAAK,MAGLvI,QAAS,kBAAM,EAAKA,QAAQ,SAZhC,oBAiBJ,oBAAID,UAAU,WAAWwI,KAAK,eAA9B,SACI,wBACIxI,UACI,YAC4B,UAA3B5D,KAAKJ,MAAMyM,YACN,UACA,IAEVlM,GAAG,YACHmM,iBAAe,MACfC,iBAAe,SACf9L,KAAK,SACL2L,KAAK,MACLvI,QAAS,kBAAM,EAAKA,QAAQ,UAZhC,4B,GAlDD3C,IAAMC,W,wBCqDVqL,E,kDAlDX,WAAY5M,GAAQ,IAAD,8BACf,cAAMA,IACD6M,MAAQ,CACTC,MAAM,GAGV,EAAKA,KAAO,EAAKA,KAAK5M,KAAV,gBACZ,EAAK6M,KAAO,EAAKA,KAAK7M,KAAV,gBAPG,E,wCAUnB,WACIE,KAAK4M,SAAS,CAAEF,MAAM,M,kBAG1B,WACI1M,KAAK4M,SAAS,CAAEF,MAAM,M,oBAG1B,WAAU,IAAD,OACL,OACI,qCACI,cAACG,EAAA,EAAD,CAAQC,QAAQ,SAASjJ,QAAS7D,KAAK0M,KAAvC,qBAIA,eAACK,EAAA,EAAD,CAAOL,KAAM1M,KAAKyM,MAAMC,KAAMM,OAAQhN,KAAK2M,KAA3C,UACI,cAACI,EAAA,EAAME,OAAP,CAAcC,aAAW,EAAzB,SACI,cAACH,EAAA,EAAMI,MAAP,wBAEJ,cAACJ,EAAA,EAAMK,KAAP,gDACA,eAACL,EAAA,EAAMM,OAAP,WACI,cAACR,EAAA,EAAD,CACIC,QAAQ,YACRjJ,QAAS,WACL,EAAK8I,OACL,EAAK/M,MAAM0N,WAJnB,iBASA,cAACT,EAAA,EAAD,CAAQC,QAAQ,UAAUjJ,QAAS7D,KAAK2M,KAAxC,6B,GAzCFzL,IAAMC,WCFfoM,EAAS,CAAC,4FAAD,mFAiBTC,EAAb,4JACI,WAAU,IAAD,OACL,OACI,qBACI5J,UAAU,sBACVwI,KAAK,QACLH,aAAW,cAHf,SAKKsB,EAAOjN,KAAI,SAACqB,EAASpB,GAAV,OACR,wBACIE,KAAK,SACLmD,UAAU,0BACVC,QAAS,kBAAM,EAAKjE,MAAM4G,SAAS7E,IAHvC,SAKKpB,EAAQ,aAdjC,GAA4BW,IAAMC,WC4fnBsM,E,kDA7fX,WAAY7N,GAAQ,IAAD,8BACf,cAAMA,IACD6M,MAAQ,CACT5H,KAAM,CACF,CACIhC,EAAG,EACHF,EAAG,EACH1D,SAAU2C,EAAS1C,OACnBsB,MAAOnB,EAAOC,MACdyD,OAAQ,KAGhBH,KAAM,EACN8K,aAAc,EACdtL,YAAa,KACbuL,WAAY,EACZtB,YAAa,OACblB,YAAa,CAAC,CAAC,EAAG,IAClBC,WAAY,EAEZwC,YAAa,IAAIb,QAAM3H,SAASe,eAAe,gBAC/C0H,gBAAiB,IAAId,QACjB3H,SAASe,eAAe,qBA0BhC,EAAK2H,QAAU,EAAKA,QAAQhO,KAAb,gBACf,EAAK0G,SAAW,EAAKA,SAAS1G,KAAd,gBAChB,EAAKkE,WAAa,EAAKA,WAAWlE,KAAhB,gBAClB,EAAK+K,eAAiB,EAAKA,eAAe/K,KAApB,gBACtB,EAAKG,YAAc,EAAKA,YAAYH,KAAjB,gBACnB,EAAKuE,eAAiB,EAAKA,eAAevE,KAApB,gBACtB,EAAK0E,YAAc,EAAKA,YAAY1E,KAAjB,gBACnB,EAAK6D,YAAc,EAAKA,YAAY7D,KAAjB,gBACnB,EAAK8L,WAAa,EAAKA,WAAW9L,KAAhB,gBAClB,EAAKgM,iBAAmB,EAAKA,iBAAiBhM,KAAtB,gBACxB,EAAKiO,iBAAmB,EAAKA,iBAAiBjO,KAAtB,gBACxB,EAAKkO,mBAAqB,EAAKA,mBAAmBlO,KAAxB,gBAC1B,EAAKmO,eAAiB,EAAKA,eAAenO,KAApB,gBACtB,EAAKoO,UAAY,EAAKA,UAAUpO,KAAf,gBACjB,EAAKqO,iBAAmB,EAAKA,iBAAiBrO,KAAtB,gBAGxBgG,YAAW,kBAAM,EAAKU,SDpEN,qCCoE6B,GAE7CpB,SACKuC,cAAc,SACdf,MAAMwH,YAAY,SAAU,EAAK3B,MAAM7J,MArE7B,E,6CAwEnB,WACI,IAGIb,EAHExB,EAAQP,KAAKyM,MAAM5H,KAAKwJ,WAC1B,SAAC1M,GAAD,OAAaA,EAAQ1C,WAAa2C,EAASzC,SAI3C4C,EADA/B,KAAKyM,MAAM5H,KAAKtE,GAAOC,QAAUnB,EAAOI,IAC7B,EACJO,KAAKyM,MAAM5H,KAAKtE,GAAOC,QAAUnB,EAAOK,OACpC,EAEA,EAEfM,KAAK4M,SAAS,CACVc,aAAcnN,EAEd4K,YAAa,CAAC,CAAC5K,EAAOwB,IACtBqJ,WAAY,EACZkD,aAAc,M,sBAItB,SAAS9M,GAAO,IAAD,OACXiC,QAAQC,IAAI,aACZ,IAFW,EAEPd,EAAO,KACP2L,EAAO,EACL1J,EAAO,GAJF,cAKQrD,EAAKgN,MAAM,OALnB,IAKX,2BAAqC,CAAC,IAC5BC,EAD2B,QAChBC,OAAOF,MAAM,MACjB,OAAT5L,EACAA,EAAO6L,EAAInM,OACHmM,EAAI,GAAGE,WAAW,MAC1BJ,IAIJ,IAAK,IAAI1L,EAAI,EAAGA,EAAI4L,EAAInM,OAAQO,IAAK,CACjC,IAAMf,EAAO2M,EAAI5L,GAAG+L,QAAQ,KAAM,IAC5BC,EAAW7O,KAAK8N,QAAQjL,EAAG0L,EAAO,GACpCxJ,GAAW,EACXjD,EAAKyB,SAAS,KACdsL,EAAS5P,SAAW2C,EAASzC,MACtB2C,EAAKyB,SAAS,MACrBsL,EAAS5P,SAAW2C,EAASxC,KAC7B2F,GAAW,GAEX8J,EAAS5P,SAAW2C,EAAS1C,OAE7B6F,IACIjD,EAAKyB,SAAS,KACdsL,EAASrO,MAAQnB,EAAOI,IACjBqC,EAAKyB,SAAS,OACrBsL,EAASrO,MAAQnB,EAAOK,QAE5BmP,EAAS9L,OAASjB,EACb0M,MAAM,IACNlD,QAAO,SAAC3J,GAAD,OAAcmN,MAAMnN,MAC3BrB,KAAI,SAACqB,GAAD,OAAasC,SAAStC,OAEnCkD,EAAK/B,KAAK+L,GAId,GAAIN,IAAS3L,EACT,OA1CG,8BA6CX5C,KAAK4M,SACD,CACI/H,KAAMA,EACNjC,KAAMA,EACNR,YAAa,KACbuL,WAAY,EACZxC,YAAa,CAAC,CAAC,EAAG,IAClBC,WAAY,IAEhB,kBAAM,EAAK8C,iB,wBAKnB,SAAWtL,GAAO,IAAD,OACb5C,KAAK4M,UAAS,SAACH,GACX,IAAI5H,EACJ,GAAIjC,EAAO6J,EAAM7J,KACbiC,EAAO4H,EAAM5H,KAAKyG,QACd,SAAC3J,GAAD,OAAaA,EAAQkB,EAAID,GAAQjB,EAAQgB,EAAIC,UAE9C,GAAIA,EAAO6J,EAAM7J,KAAM,CAC1BiC,EAAO,GADmB,oBAEP4H,EAAM5H,MAFC,IAE1B,2BAA+B,CAAC,IAArB/C,EAAoB,QAE3B,GADA+C,EAAK/B,KAAKhB,GACNA,EAAKe,EAAI,IAAM4J,EAAM7J,KACrB,IAAK,IAAIkC,EAAI,EAAGA,EAAIlC,EAAOd,EAAKe,EAAGiC,IAC/BD,EAAK/B,KAAK,EAAKgL,QAAQhM,EAAKe,EAAIiC,EAAGhD,EAAKa,KAN1B,8BAU1B,IAAK,IAAIoM,EAAI,EAAGA,EAAInM,EAAO6J,EAAM7J,KAAMmM,IACnC,IAAK,IAAIjK,EAAI,EAAGA,EAAIlC,EAAMkC,IACtBD,EAAK/B,KAAK,EAAKgL,QAAQhJ,EAAGlC,EAAO,SAIzCiC,EAAO4H,EAAM5H,KAEjB,MAAO,CAAEjC,KAAMA,EAAMiC,KAAMA,EAAM6I,aAAc,W,qBAIvD,SAAQ7K,EAAGF,GACP,MAAO,CACHE,EAAGA,EACHF,EAAGA,EACH1D,SAAU2C,EAAS1C,OACnBsB,MAAOnB,EAAOC,MACdyD,OAAQ,M,4BAIhB,SAAeF,EAAGF,GAAI,IAAD,OACjB,GAA+B,SAA3B3C,KAAKyM,MAAMJ,YAAwB,CACnC,IAAM2C,EAAWhP,KAAKmO,iBAAL,MAAAnO,KAAA,YACVA,KAAKyM,MAAMtB,YAAYnL,KAAKyM,MAAMrB,cACvC1J,MAAK,SAACC,GAAD,OAAaA,EAAQkB,IAAMA,GAAKlB,EAAQgB,IAAMA,KACrD,QAAiBqJ,IAAbgD,EACA,OACOA,EAAS/P,WAAa2C,EAASxC,MACtCY,KAAKyM,MAAMmB,YAAYlB,OAG/B1M,KAAK4M,UAAS,SAACH,GACX,IAAMlM,EAAQoC,EAAI8J,EAAM7J,KAAOC,EAC3Bd,EAAW0K,EAAM1K,SASrB,MAR+B,SAA3B,EAAK0K,MAAMJ,cACXtK,EAAW,EAAK0K,MAAMtB,YAAY,EAAKsB,MAAMrB,YAAY,GACrD,EAAKqB,MAAM5H,KAAKtE,GAAOC,QAAUnB,EAAOI,IACxCsC,IACO,EAAK0K,MAAM5H,KAAKtE,GAAOC,QAAUnB,EAAOK,QAC/CqC,KAGD,CACH2L,aAAcjB,EAAMiB,eAAiBnN,EAAQ,KAAOA,EAEpD4K,YACIsB,EAAMrB,WAAa,GAAKqB,EAAMtB,YAAY7I,OAA1C,sBACUmK,EAAMtB,aADhB,CAC6B,CAAC5K,EAAOwB,KADrC,sBAGa0K,EAAMtB,YAAYnK,MACjB,EACAyL,EAAMrB,WAAa,IALjC,CAOU,CAAC7K,EAAOwB,KAGtBqJ,WAEIqB,EAAMrB,WAAa,EAEvBkD,aACI7B,EAAMrB,WAAaqB,EAAM6B,aACnB7B,EAAM6B,aAAe,EACrB7B,EAAM6B,mB,8BAK5B,SAAiB/N,EAAOwB,GACpB,IAD8B,EACxBD,EAAO9B,KAAKyM,MAAM5H,KAAKtE,GACvB2K,EAAY,GAFY,cAGVpJ,EAAKiB,QAHK,IAG9B,2BAAiC,CAAC,IAAvBC,EAAsB,QACvBC,EAAanB,EAAKe,EAAIzB,EAAW4B,GAAO,GAAKjB,EAC7CmB,EAAapB,EAAKa,EAAIvB,EAAW4B,GAAO,GAAKjB,EACnD,GACIkB,GAAc,GACdA,EAAajD,KAAKyM,MAAM7J,MACxBM,GAAc,GACdA,EAAalD,KAAKyM,MAAM7J,KAC1B,CACE,IAAMqM,EACFjP,KAAKyM,MAAM5H,KAAK3B,EAAalD,KAAKyM,MAAM7J,KAAOK,GAGZ,IAA/BgM,EAAalM,OAAOT,QACpB2M,EAAahQ,WAAa2C,EAAS1C,QAGvCgM,EAAUpI,KAAKmM,KApBG,8BAwB9B,OAAO/D,I,yBAGX,SAAY1K,GACRR,KAAKkP,YAAW,SAAUC,EAAMrN,GAC5BA,EAAKtB,MAAQA,O,4BAIrB,SAAeC,GACXT,KAAKkP,YAAW,SAAUC,EAAMrN,GAC5BA,EAAK7C,SAAWwB,O,yBAIxB,SAAYuC,EAAOoM,GACfpP,KAAKkP,YAAW,SAAUC,EAAMrN,GAExBA,EAAKiB,OADLqM,EACA,sBAAkBD,EAAKpM,QAAvB,CAA+BC,IAEjBmM,EAAKpM,OAAOuI,QACtB,SAAC3J,GAAD,OAAaA,IAAYqB,U,wBAMzC,SAAWqM,GACPrP,KAAK4M,UAAS,SAACH,GACX,IAAMlM,EAAQkM,EAAMiB,aACd5L,EAAI,eAAQ2K,EAAM5H,KAAKtE,IAE7B,OADA8O,EAAK5C,EAAM5H,KAAKtE,GAAQuB,GACjB,CACH+C,KAAK,GAAD,mBACG4H,EAAM5H,KAAK7D,MAAM,EAAGT,IADvB,CAEAuB,GAFA,YAGG2K,EAAM5H,KAAK7D,MAAMT,EAAQ,W,yBAM5C,SAAY6B,EAAab,QACJyK,IAAbzK,EACAvB,KAAKyM,MAAMoB,gBAAgBnB,OAE3B1M,KAAK4M,SAAS,CACVxK,YAAaA,EACbb,SAAUA,EACVoK,KAAMpK,EAASe,OAAS,EACxBqL,WAAY9E,KAAK1E,IAAI5C,EAASe,OAAS,EAAG,O,wBAKtD,SAAWqJ,GACHA,EAAO3L,KAAKyM,MAAMlL,SAASe,QAC3BtC,KAAK4M,SAAS,CAAEjB,KAAMA,M,8BAI9B,SAAiBA,GACb3L,KAAK4M,SAAS,CAAEe,WAAYhC,M,8BAGhC,SAAiBA,GACTA,EAAO3L,KAAKyM,MAAMtB,YAAY7I,QAC9BtC,KAAK4M,SAAS,CACVxB,WAAYO,EACZ+B,aAAc1N,KAAKyM,MAAMtB,YAAYQ,GAAM,O,gCAKvD,SAAmBA,GACf3L,KAAK4M,SAAS,CAAE0B,aAAc3C,M,gCAGlC,SAAmB2D,EAAWC,GACtBA,EAAU3M,OAAS5C,KAAKyM,MAAM7J,MAC9BwC,SACKuC,cAAc,SACdf,MAAMwH,YAAY,SAAUpO,KAAKyM,MAAM7J,Q,4BAIpD,SAAe4M,GACXxP,KAAK4M,SAAS,CAAEP,YAAamD,M,oBAGjC,WACI,IAIIC,EAJE9O,EAC0B,OAA5BX,KAAKyM,MAAMiB,aACL,KACA1N,KAAKyM,MAAM5H,KAAK7E,KAAKyM,MAAMiB,cAoFrC,OAjFI+B,EAD2B,SAA3BzP,KAAKyM,MAAMJ,YAEP,qCACI,4BACK,cACGrM,KAAKyM,MAAMtB,YAAYnL,KAAKyM,MAAMrB,YAAY,KAEtD,cAAC,EAAD,CACIO,KAAM3L,KAAKyM,MAAMrB,WACjBW,QAAS/L,KAAKyM,MAAMtB,YAAY7I,OAAS,EACzCsJ,WAAY5L,KAAK+N,iBACjBlC,OAAQ7L,KAAKyM,MAAM6B,aACnBxC,iBAAkB9L,KAAKgO,qBAE3B,cAAC,EAAD,CAASV,QAAStN,KAAKkO,YACvB,sBAAKwB,MAAM,wBAAwBtD,KAAK,QAAxC,8JAG0C,uBACtC,uBAJJ,oOAY0B,SAA3BpM,KAAKyM,MAAMJ,YAEd,qCACI,cAAC,EAAD,CACIzJ,KAAM5C,KAAKyM,MAAM7J,KACjBoB,WAAYhE,KAAKgE,aAErB,uBACA,cAAC,EAAD,CACIrD,SAAUA,EACV0D,eAAgBrE,KAAKqE,iBAEzB,uBACA,cAAC,EAAD,CACI1D,SAAUA,EACVV,YAAaD,KAAKC,cAEtB,uBACA,cAAC,EAAD,CACIU,SAAUA,EACV6D,YAAaxE,KAAKwE,cAEtB,uBACA,cAAC,EAAD,CAAYK,KAAM7E,KAAKyM,MAAM5H,KAAMjC,KAAM5C,KAAKyM,MAAM7J,UAKxD,sBAAKgB,UAAU,MAAf,UACI,qBAAKA,UAAU,MAAf,SACI,cAAC,EAAD,CACIpC,KAAMxB,KAAKyM,MAAM5H,KACjBjC,KAAM5C,KAAKyM,MAAM7J,KACjBe,YAAa3D,KAAK2D,gBAGE,OAA3B3D,KAAKyM,MAAMrK,YACR,qBAAKwB,UAAU,MAAf,SACI,cAAC,EAAD,CACI+H,KAAM3L,KAAKyM,MAAMd,KACjBI,QAASlD,KAAK1E,IACVnE,KAAKyM,MAAMlL,SAASe,OAAS,EAC7B,GAEJsJ,WAAY5L,KAAK4L,WACjBC,OAAQ7L,KAAKyM,MAAMkB,WACnB7B,iBAAkB9L,KAAK8L,qBAI/B,MAMZ,gCACI,+CACA,kGAIA,cAAC,EAAD,CAAQtF,SAAUxG,KAAKwG,WACvB,sBAAK5C,UAAU,MAAf,UACI,qBAAKA,UAAU,QAAf,SACI,+EAEJ,qBAAKA,UAAU,MAAf,SACI,cAAC,EAAD,CAAY4C,SAAUxG,KAAKwG,gBAGnC,qBAAK5C,UAAU,WAAf,SACI,cAAC,EAAD,CACIuI,UAAWnM,KAAKiO,eAChB5B,YAAarM,KAAKyM,MAAMJ,gBAGhC,sBAAKzI,UAAU,MAAf,UACI,qBAAKA,UAAU,6BAAf,SACI,cAAC,EAAD,CACIiB,KAAM7E,KAAKyM,MAAM5H,KACjBgG,eAAgB7K,KAAK6K,eACrBlK,SAAUX,KAAKyM,MAAMiB,aACrB7L,MAC+B,OAA3B7B,KAAKyM,MAAMrK,aACgB,UAA3BpC,KAAKyM,MAAMJ,YACL,KACArM,KAAKyM,MAAMrK,YAAYpC,KAAKyM,MAAMd,MAC7B9J,MAEfN,SAC+B,OAA3BvB,KAAKyM,MAAMrK,aACgB,UAA3BpC,KAAKyM,MAAMJ,YACL,KACArM,KAAKyM,MAAMlL,SAErB4J,YAC+B,SAA3BnL,KAAKyM,MAAMJ,YACLrM,KAAKyM,MAAMtB,YACX,KAEVC,WAAYpL,KAAKyM,MAAMrB,WACvBF,UAC+B,SAA3BlL,KAAKyM,MAAMJ,aACXrM,KAAKyM,MAAMtB,YAAY7I,OAAS,EAC1BtC,KAAKmO,iBAAL,MAAAnO,KAAA,YACOA,KAAKyM,MAAMtB,YACVnL,KAAKyM,MAAMrB,cAGnB,SAIlB,qBAAKxH,UAAU,MAAf,SAAsB6L,c,GArfxBvO,IAAMC,WCLTwO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlL,SAASe,eAAe,SAM1BwJ,M","file":"static/js/main.5d772cd2.chunk.js","sourcesContent":["const cellType = {\r\n    // BLANK: 0,\r\n    NORMAL: 1,\r\n    START: 2,\r\n    GOAL: 3,\r\n};\r\n\r\nexport default cellType;\r\n","import React from \"react\";\r\n\r\nexport const Colors = {\r\n    BLACK: { name: \"black\", value: \"#000\" },\r\n    RED: { name: \"red\", value: \"#F00\" },\r\n    YELLOW: { name: \"yellow\", value: \"#FFFF00\" },\r\n};\r\n\r\n//https://stackoverflow.com/questions/2532218/pick-random-property-from-a-javascript-object\r\nexport function getRandomColor() {\r\n    const keys = Object.keys(Colors);\r\n    return Colors[keys[(keys.length * Math.random()) << 0]];\r\n}\r\n\r\nexport class ColorButtons extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onChange = this.onChange.bind(this);\r\n    }\r\n\r\n    onChange(event) {\r\n        // console.log(event.target);\r\n        this.props.updateColor(Colors[event.target.id]);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div onChange={this.onChange}>\r\n                {Object.entries(Colors).map(([name, color], index) => (\r\n                    <div key={index}>\r\n                        <input\r\n                            type=\"radio\"\r\n                            id={name}\r\n                            name=\"color\"\r\n                            checked={\r\n                                this.props.selected !== null &&\r\n                                this.props.selected.color === color\r\n                            }\r\n                            disabled={this.props.selected === null}\r\n                            readOnly\r\n                        />\r\n                        <label htmlFor={name}>\r\n                            {name.charAt(0) + name.slice(1).toLowerCase()}\r\n                        </label>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","const directions = [\r\n    [0, -1],\r\n    [1, -1],\r\n    [1, 0],\r\n    [1, 1],\r\n    [0, 1],\r\n    [-1, 1],\r\n    [-1, 0],\r\n    [-1, -1],\r\n];\r\n\r\nexport default directions;\r\n","import React from \"react\";\r\nimport CellType from \"./CellType\";\r\nimport { Colors } from \"./Color\";\r\nimport directions from \"./Directions\";\r\n\r\nclass SolveButton extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.solve = this.solve.bind(this);\r\n    }\r\n\r\n    solve() {\r\n        const maze = this.props.maze;\r\n        const start = maze.find(\r\n            (element) => element.cellType === CellType.START\r\n        );\r\n        // const goal = maze.find((element) => element.cellType === CellType.GOAL);\r\n        const queue = [{ cell: start, stepSize: 1, path: [start], depth: 0 }];\r\n        const visited = new Map();\r\n\r\n        //each key is the depth of BFS tree\r\n        const solvedSteps = {};\r\n        let solution;\r\n\r\n        let depth = 0;\r\n        let popped = [];\r\n        while (queue.length > 0) {\r\n            const current = queue.shift();\r\n\r\n            if (current.depth !== depth) {\r\n                const queueMap = new Map();\r\n                for (const element of popped) {\r\n                    queueMap.set(\r\n                        element.cell.y * this.props.size + element.cell.x,\r\n                        element\r\n                    );\r\n                }\r\n                solvedSteps[depth] = {\r\n                    queue: queueMap,\r\n                    // visited: cloneDeep(visited),\r\n                };\r\n                depth++;\r\n                // popped = [];\r\n            }\r\n\r\n            popped.push(current);\r\n\r\n            if (current.cell.color === Colors.RED) {\r\n                current.stepSize++;\r\n            } else if (current.cell.color === Colors.YELLOW) {\r\n                current.stepSize--;\r\n                if (current.stepSize === 0) {\r\n                    continue;\r\n                }\r\n            }\r\n\r\n            // current.distance++;\r\n\r\n            for (const arrow of current.cell.arrows) {\r\n                const neighbor_x =\r\n                    current.cell.x + directions[arrow][0] * current.stepSize;\r\n                const neighbor_y =\r\n                    current.cell.y + directions[arrow][1] * current.stepSize;\r\n                if (\r\n                    neighbor_x >= 0 &&\r\n                    neighbor_x < this.props.size &&\r\n                    neighbor_y >= 0 &&\r\n                    neighbor_y < this.props.size\r\n                ) {\r\n                    const neighbor_index =\r\n                        neighbor_y * this.props.size + neighbor_x;\r\n                    const neighbor = maze[neighbor_index];\r\n                    if (\r\n                        visited.has(current.stepSize) &&\r\n                        visited.get(current.stepSize).includes(neighbor_index)\r\n                    ) {\r\n                        //cycle\r\n                        continue;\r\n                    }\r\n                    if (!visited.has(current.stepSize)) {\r\n                        visited.set(current.stepSize, []);\r\n                    }\r\n                    visited.get(current.stepSize).push(neighbor_index);\r\n                    const newPath = [...current.path, neighbor];\r\n                    queue.push({\r\n                        cell: neighbor,\r\n                        stepSize: current.stepSize,\r\n                        path: [...current.path, neighbor],\r\n                        depth: current.depth + 1,\r\n                    });\r\n                    if (neighbor.cellType === CellType.GOAL) {\r\n                        solution = newPath;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // depth++;\r\n        const queueMap = new Map();\r\n        for (const element of popped) {\r\n            queueMap.set(\r\n                element.cell.y * this.props.size + element.cell.x,\r\n                element\r\n            );\r\n        }\r\n        solvedSteps[depth] = {\r\n            queue: queueMap,\r\n            // visited: cloneDeep(visited),\r\n        };\r\n        console.log(solvedSteps);\r\n\r\n        if (solution !== undefined) {\r\n            // console.log(solution);\r\n        }\r\n\r\n        this.props.setSolution(solvedSteps, solution);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <button\r\n                type=\"button\"\r\n                className=\"btn btn-success\"\r\n                onClick={this.solve}\r\n            >\r\n                Solve\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SolveButton;\r\n","import React from \"react\";\r\n\r\nclass SizeChanger extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onInput = this.onInput.bind(this);\r\n    }\r\n\r\n    onInput(event) {\r\n        // console.log(event.target.value);\r\n        //if the input is invalid, it returns empty string which is falsy\r\n        if (event.target.value) {\r\n            this.props.updateSize(parseInt(event.target.value));\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <label htmlFor=\"size\">Size (max 10):</label>\r\n                <input\r\n                    type=\"number\"\r\n                    id=\"size\"\r\n                    min=\"2\"\r\n                    max=\"10\"\r\n                    value={this.props.size}\r\n                    onChange={this.onInput}\r\n                ></input>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SizeChanger;\r\n","import React from \"react\";\r\nimport CellType from \"./CellType\";\r\n\r\nclass TypeButtons extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onChange = this.onChange.bind(this);\r\n    }\r\n\r\n    onChange(event) {\r\n        this.props.updateCellType(CellType[event.target.id]);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div onChange={this.onChange}>\r\n                {Object.entries(CellType).map(([name, value], index) => (\r\n                    <div key={index}>\r\n                        <input\r\n                            type=\"radio\"\r\n                            id={name}\r\n                            name=\"cellType\"\r\n                            checked={\r\n                                this.props.selected !== null &&\r\n                                this.props.selected.cellType === value\r\n                            }\r\n                            disabled={this.props.selected === null}\r\n                            readOnly\r\n                        />\r\n                        <label htmlFor={name}>\r\n                            {name.charAt(0) + name.slice(1).toLowerCase()}\r\n                        </label>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TypeButtons;\r\n","import React from \"react\";\r\nimport CellType from \"./CellType\";\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\nclass ArrowBoxes extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.getInput = this.getInput.bind(this);\r\n        this.onChange = this.onChange.bind(this);\r\n    }\r\n\r\n    onChange(id, checked) {\r\n        // console.log(event.target);\r\n        this.props.updateArrow(id, checked);\r\n    }\r\n\r\n    getInput(index) {\r\n        return (\r\n            // <input\r\n            //     className=\"form-check-input\"\r\n            //     type=\"checkbox\"\r\n            //     id={index}\r\n            //     checked={\r\n            //         this.props.selected !== null &&\r\n            //         this.props.selected.cellType !== CellType.GOAL &&\r\n            //         this.props.selected.arrows.includes(index)\r\n            //     }\r\n            //     disabled={\r\n            //         this.props.selected === null ||\r\n            //         this.props.selected.cellType === CellType.GOAL\r\n            //     }\r\n            //     defaultChecked\r\n            // />\r\n            <Form.Check\r\n                type=\"checkbox\"\r\n                id={index}\r\n                // label={`default ${type}`}\r\n                checked={\r\n                    this.props.selected !== null &&\r\n                    this.props.selected.cellType !== CellType.GOAL &&\r\n                    this.props.selected.arrows.includes(index)\r\n                }\r\n                disabled={\r\n                    this.props.selected === null ||\r\n                    this.props.selected.cellType === CellType.GOAL\r\n                }\r\n                onChange={(event) => this.onChange(index, event.target.checked)}\r\n                readOnly\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h6>Arrows</h6>\r\n                <div className=\"row\">\r\n                    <div className=\"col-1\">{this.getInput(7)}</div>\r\n                    <div className=\"col-1\">{this.getInput(0)}</div>\r\n                    <div className=\"col-1\">{this.getInput(1)}</div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-1\">{this.getInput(6)}</div>\r\n                    <div className=\"col-1\"></div>\r\n                    <div className=\"col-1\">{this.getInput(2)}</div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-1\">{this.getInput(5)}</div>\r\n                    <div className=\"col-1\">{this.getInput(4)}</div>\r\n                    <div className=\"col-1\">{this.getInput(3)}</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ArrowBoxes;\r\n","import React from \"react\";\r\nimport CellType from \"./CellType\";\r\nimport { Colors } from \"./Color\";\r\n\r\nclass SaveButton extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onClick = this.onClick.bind(this);\r\n    }\r\n\r\n    onClick() {\r\n        let string = \"\";\r\n        const data = this.props.data;\r\n        for (let i = 0; i < data.length; i++) {\r\n            let doArrows = false;\r\n            if (data[i].cellType === CellType.START) {\r\n                string += \"S\";\r\n                doArrows = true;\r\n            } else if (data[i].cellType === CellType.NORMAL) {\r\n                doArrows = true;\r\n            } else if (data[i].cellType === CellType.GOAL) {\r\n                string += \"G\";\r\n            }\r\n            if (doArrows) {\r\n                if (data[i].arrows.length === 0) {\r\n                    string += \"B\";\r\n                } else {\r\n                    if (data[i].color !== Colors.BLACK) {\r\n                        string += data[i].color.name.toUpperCase().charAt(0);\r\n                    }\r\n                    for (const arrow of data[i].arrows) {\r\n                        string += arrow;\r\n                    }\r\n                }\r\n            }\r\n            if ((i + 1) % this.props.size === 0) {\r\n                string += \"\\n\";\r\n            } else {\r\n                string += \" \";\r\n            }\r\n        }\r\n\r\n        let file = new Blob([string], { type: \"text/plain\" });\r\n        let a = document.createElement(\"a\");\r\n        let url = URL.createObjectURL(file);\r\n        a.href = url;\r\n        a.download = \"maze.txt\";\r\n        document.body.appendChild(a);\r\n        a.click();\r\n        setTimeout(function () {\r\n            document.body.removeChild(a);\r\n            window.URL.revokeObjectURL(url);\r\n        }, 0);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <button\r\n                type=\"button\"\r\n                className=\"btn btn-outline-primary\"\r\n                onClick={this.onClick}\r\n            >\r\n                Save\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SaveButton;\r\n","import React from \"react\";\r\n\r\nclass LoadButton extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onClick = this.onClick.bind(this);\r\n        this.onChange = this.onChange.bind(this);\r\n    }\r\n\r\n    onClick() {\r\n        document.getElementById(\"fileInput\").click();\r\n    }\r\n\r\n    onChange(event) {\r\n        // console.log(event.target.files);\r\n        const file = event.target.files[0];\r\n        const reader = new FileReader();\r\n        reader.addEventListener(\"load\", (event) => {\r\n            this.props.loadMaze(event.target.result);\r\n        });\r\n        reader.readAsText(file);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-primary\"\r\n                    onClick={this.onClick}\r\n                >\r\n                    Load\r\n                </button>\r\n                <input\r\n                    id=\"fileInput\"\r\n                    type=\"file\"\r\n                    accept=\".txt\"\r\n                    style={{ display: \"none\" }}\r\n                    onChange={this.onChange}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LoadButton;\r\n","const visitType = {\r\n    NOT_VISITED: 0,\r\n    VISITING: 1,\r\n    VISITED: 2,\r\n    ON_PATH: 3,\r\n};\r\n\r\nexport default visitType;\r\n","import React from \"react\";\r\nimport CellType from \"./CellType\";\r\nimport VisitType from \"./Visit\";\r\n\r\nexport default class Cell extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleClick() {\r\n        // this.setState((state) => ({\r\n        //     color: colors[(colors.indexOf(state.color) + 1) % colors.length],\r\n        // }));\r\n        this.props.handler(this.props.x, this.props.y);\r\n    }\r\n\r\n    render() {\r\n        //when selected display its paths (even if it is not the solution) (there can be multiple due to step sizes)\r\n        //TODO draw lines and numbers for the paths, because the fact that you can visit a cell multiple times, and that there are multiple step sizes it is impossible to follow with just colors\r\n        let color;\r\n        if (this.props.cellType === CellType.START) {\r\n            color = \"#FF7FED\";\r\n        } else if (this.props.visit === VisitType.VISITING) {\r\n            color = \"#66FF66\";\r\n        } else if (this.props.visit === VisitType.ON_PATH) {\r\n            color = \"#33e5b2\";\r\n        } else if (this.props.visit === VisitType.VISITED) {\r\n            color = \"#00CCFF\";\r\n        } else if (this.props.x % 2 === this.props.y % 2) {\r\n            color = \"#CCCCCC\";\r\n        } else {\r\n            color = \"#DDDDDD\";\r\n        }\r\n\r\n        const cellSize = parseInt(\r\n            getComputedStyle(document.querySelector(\":root\")).getPropertyValue(\r\n                \"--cell-size\"\r\n            )\r\n        );\r\n        // console.log(cellSize);\r\n        const margin = cellSize * 0.16;\r\n        const stroke = cellSize * 0.08;\r\n        const fontSize = 20;\r\n\r\n        const text = [];\r\n        //hardcoded text locations, I have tried other solutions (for example involving precomputing the sizes) but they were complicated and did not work well\r\n        const textLocations = {\r\n            0: [\r\n                [cellSize / 2, margin],\r\n                [cellSize / 2 - fontSize, margin],\r\n                [cellSize / 2 + fontSize, margin],\r\n            ],\r\n            1: [\r\n                [cellSize - margin, margin],\r\n                [cellSize - margin - fontSize, margin],\r\n                [cellSize - margin, margin + fontSize],\r\n            ],\r\n            2: [\r\n                [cellSize - margin, cellSize / 2],\r\n                [cellSize - margin, cellSize / 2 - fontSize],\r\n                [cellSize - margin, cellSize / 2 + fontSize],\r\n            ],\r\n            3: [\r\n                [cellSize - margin, cellSize - margin],\r\n                [cellSize - margin, cellSize - margin - fontSize],\r\n                [cellSize - margin - fontSize, cellSize - margin],\r\n            ],\r\n            4: [\r\n                [cellSize / 2, cellSize - margin],\r\n                [cellSize / 2 - fontSize, cellSize - margin],\r\n                [cellSize / 2 + fontSize, cellSize - margin],\r\n            ],\r\n            5: [\r\n                [margin, cellSize - margin],\r\n                [margin, cellSize - margin - fontSize],\r\n                [margin + fontSize, cellSize - margin],\r\n            ],\r\n            6: [\r\n                [margin, cellSize / 2],\r\n                [margin, cellSize / 2 - fontSize],\r\n                [margin, cellSize / 2 + fontSize],\r\n            ],\r\n            7: [\r\n                [margin, margin],\r\n                [margin + fontSize, margin],\r\n                [margin, margin + fontSize],\r\n            ],\r\n        };\r\n        if (this.props.solution !== null) {\r\n            // console.log(this.props.solution);\r\n            for (const [direction, list] of this.props.solution) {\r\n                if (list.length > 0) {\r\n                    const locations = textLocations[direction];\r\n                    for (\r\n                        let i = 0;\r\n                        i < Math.min(locations.length, list.length);\r\n                        i++\r\n                    ) {\r\n                        text.push(\r\n                            <text\r\n                                x={locations[i][0]}\r\n                                y={locations[i][1]}\r\n                                dominant-baseline=\"middle\"\r\n                                text-anchor=\"middle\"\r\n                                font-size=\"16\"\r\n                                fill=\"white\"\r\n                                stroke=\"black\"\r\n                                stroke-width=\"0.6\"\r\n                                font-weight=\"bold\"\r\n                            >\r\n                                {list[i].i}\r\n                            </text>\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let content;\r\n        if (this.props.cellType === CellType.GOAL) {\r\n            content =\r\n                \"GOAL\" +\r\n                (this.props.solution === null\r\n                    ? \"\"\r\n                    : \" \" +\r\n                      Array.from(this.props.solution.values()).find(\r\n                          (list) => list.length > 0\r\n                      )[0].i);\r\n        } else {\r\n            content = (\r\n                <svg\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    width={cellSize}\r\n                    height={cellSize}\r\n                    // prevent svg itself from being clicked, because it can be rotated which would exceed the cell's box\r\n                    // https://stackoverflow.com/a/43778490\r\n                    style={{ pointerEvents: \"none\" }}\r\n                >\r\n                    <defs>\r\n                        {/* lol need a separate marker for each color: https://stackoverflow.com/questions/16664584/changing-an-svg-markers-color-css */}\r\n                        <marker\r\n                            id=\"arrowhead_black\"\r\n                            viewBox=\"0 0 40 40\"\r\n                            refX=\"5\"\r\n                            refY=\"5\"\r\n                            markerUnits=\"strokeWidth\"\r\n                            markerWidth=\"10\"\r\n                            markerHeight=\"10\"\r\n                            orient=\"auto\"\r\n                        >\r\n                            <path d=\"M 0 0 L 10 5 L 0 10 z\" fill=\"#000\" />\r\n                        </marker>\r\n                        <marker\r\n                            id=\"arrowhead_red\"\r\n                            viewBox=\"0 0 40 40\"\r\n                            refX=\"5\"\r\n                            refY=\"5\"\r\n                            markerUnits=\"strokeWidth\"\r\n                            markerWidth=\"10\"\r\n                            markerHeight=\"10\"\r\n                            orient=\"auto\"\r\n                        >\r\n                            <path d=\"M 0 0 L 10 5 L 0 10 z\" fill=\"#F00\" />\r\n                        </marker>\r\n                        <marker\r\n                            id=\"arrowhead_yellow\"\r\n                            viewBox=\"0 0 40 40\"\r\n                            refX=\"5\"\r\n                            refY=\"5\"\r\n                            markerUnits=\"strokeWidth\"\r\n                            markerWidth=\"10\"\r\n                            markerHeight=\"10\"\r\n                            orient=\"auto\"\r\n                        >\r\n                            <path d=\"M 0 0 L 10 5 L 0 10 z\" fill=\"#FFFF00\" />\r\n                        </marker>\r\n                    </defs>\r\n                    {/* <rect x=\"0\" y=\"0\" width=\"50\" height=\"50\" fill=\"#FFF\" /> */}\r\n                    {this.props.arrows.map((arrow, index) => (\r\n                        <line\r\n                            x1={cellSize / 2}\r\n                            y1={\r\n                                this.props.arrows.length > 1\r\n                                    ? cellSize / 2\r\n                                    : cellSize - margin\r\n                            }\r\n                            x2={cellSize / 2}\r\n                            y2={margin}\r\n                            stroke={this.props.color.value}\r\n                            strokeWidth={stroke}\r\n                            markerEnd={\r\n                                \"url(#arrowhead_\" + this.props.color.name + \")\"\r\n                            }\r\n                            transform={\r\n                                \"rotate(\" +\r\n                                arrow * 45 +\r\n                                \" \" +\r\n                                cellSize / 2 +\r\n                                \" \" +\r\n                                cellSize / 2 +\r\n                                \")\"\r\n                            }\r\n                            key={index}\r\n                        />\r\n                    ))}\r\n                    {text}\r\n                </svg>\r\n            );\r\n        }\r\n        // const textBoxes = document.querySelectorAll(\".solution_number\");\r\n        // for (const box of textBoxes) {\r\n        //     console.log(box.getBBox().height);\r\n        //     if (box.getAttribute(\"y\") + box.getBBox().height > cellSize) {\r\n        //         box.setAttribute(\"y\", cellSize - box.getBBox().height - 3);\r\n        //     }\r\n        // }\r\n        return (\r\n            <div\r\n                className=\"cell\"\r\n                onClick={this.handleClick}\r\n                style={{\r\n                    backgroundColor: color,\r\n                    borderColor: this.props.selected ? \"lime\" : \"black\",\r\n                    // this.props.x % 2 === this.props.y % 2\r\n                    //     ? \"#00CCFF\"\r\n                    //     : \"#66FF66\",\r\n                }}\r\n            >\r\n                {content}\r\n            </div>\r\n        );\r\n        // return <h1>Hello, {this.props.name}</h1>;\r\n    }\r\n}\r\n\r\n// function rotate_point(center_x, center_y, angle, x, y) {\r\n//     const s = Math.sin(angle);\r\n//     const c = Math.cos(angle);\r\n\r\n//     // translate point back to origin:\r\n//     x -= center_x;\r\n//     y -= center_y;\r\n//     // rotate point\r\n//     const xnew = x * c - y * s;\r\n//     const ynew = x * s + y * c;\r\n\r\n//     // translate point back:\r\n//     x = xnew + center_x;\r\n//     y = ynew + center_y;\r\n//     return [x, y];\r\n// }\r\n","import React from \"react\";\r\nimport Cell from \"./Cell\";\r\nimport VisitType from \"./Visit\";\r\n\r\nclass Maze extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handler = this.handler.bind(this);\r\n    }\r\n\r\n    handler(x, y) {\r\n        this.props.updateSelected(x, y);\r\n    }\r\n\r\n    render() {\r\n        let maxDepth = 0;\r\n        const mappedSolution = new Map();\r\n        if (this.props.queue !== null) {\r\n            for (const cell of this.props.queue.values()) {\r\n                if (cell.depth > maxDepth) {\r\n                    maxDepth = cell.depth;\r\n                }\r\n            }\r\n            for (let i = 0; i < this.props.solution.length; i++) {\r\n                const current = this.props.solution[i];\r\n                let direction = 0;\r\n                if (i < this.props.solution.length - 1) {\r\n                    const nextCell = this.props.solution[i + 1];\r\n                    if (nextCell.y < current.y && nextCell.x === current.x) {\r\n                        direction = 0;\r\n                    } else if (\r\n                        nextCell.y < current.y &&\r\n                        nextCell.x > current.x\r\n                    ) {\r\n                        direction = 1;\r\n                    } else if (\r\n                        nextCell.y === current.y &&\r\n                        nextCell.x > current.x\r\n                    ) {\r\n                        direction = 2;\r\n                    } else if (\r\n                        nextCell.y > current.y &&\r\n                        nextCell.x > current.x\r\n                    ) {\r\n                        direction = 3;\r\n                    } else if (\r\n                        nextCell.y > current.y &&\r\n                        nextCell.x === current.x\r\n                    ) {\r\n                        direction = 4;\r\n                    } else if (\r\n                        nextCell.y > current.y &&\r\n                        nextCell.x < current.x\r\n                    ) {\r\n                        direction = 5;\r\n                    } else if (\r\n                        nextCell.y === current.y &&\r\n                        nextCell.x < current.x\r\n                    ) {\r\n                        direction = 6;\r\n                    } else {\r\n                        direction = 7;\r\n                    }\r\n                }\r\n                if (!mappedSolution.has(direction)) {\r\n                    mappedSolution.set(direction, []);\r\n                }\r\n                mappedSolution.get(direction).push({\r\n                    ...current,\r\n                    i: i,\r\n                    direction: direction,\r\n                });\r\n            }\r\n            console.log(mappedSolution);\r\n        }\r\n        return (\r\n            <div className=\"maze\">\r\n                {this.props.data.map((props, index) => {\r\n                    let visit = VisitType.NOT_VISITED;\r\n                    if (this.props.queue !== null) {\r\n                        //TODO only run this if in solve tab\r\n                        if (this.props.queue.has(index)) {\r\n                            if (\r\n                                this.props.queue.get(index).depth === maxDepth\r\n                            ) {\r\n                                visit = VisitType.VISITING;\r\n                            } else if (\r\n                                //TODO this is inaccurate if a cell is visited multiple times in the solution\r\n                                //it is possible to visit a cell the first time, but with the current step size it leads to nothing\r\n                                //but during the next visit to the same cell where we have a different step size, it ends up in the solution\r\n                                //so we need a way to differentiate both cases\r\n                                this.props.solution.some(\r\n                                    (element) =>\r\n                                        element.x === props.x &&\r\n                                        element.y === props.y\r\n                                )\r\n                            ) {\r\n                                visit = VisitType.ON_PATH;\r\n                            } else {\r\n                                visit = VisitType.VISITED;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (\r\n                        this.props.adjacents !== null &&\r\n                        this.props.adjacents.some(\r\n                            (element) =>\r\n                                element.x === props.x && element.y === props.y\r\n                        )\r\n                    ) {\r\n                        visit = VisitType.VISITING;\r\n                    } else if (\r\n                        this.props.playedSteps !== null &&\r\n                        this.props.playedSteps\r\n                            .slice(0, this.props.playedStep + 1)\r\n                            .map((element) => element[0])\r\n                            .includes(index)\r\n                    ) {\r\n                        visit = VisitType.ON_PATH;\r\n                    }\r\n                    return (\r\n                        <Cell\r\n                            {...props}\r\n                            key={index}\r\n                            selected={\r\n                                this.props.selected !== null &&\r\n                                this.props.selected === index\r\n                            }\r\n                            handler={this.handler}\r\n                            visit={visit}\r\n                            solution={\r\n                                this.props.solution !== null &&\r\n                                (visit === VisitType.ON_PATH ||\r\n                                    visit === VisitType.VISITING)\r\n                                    ? new Map(\r\n                                          [...mappedSolution].map(([k, v]) => [\r\n                                              k,\r\n                                              v.filter(\r\n                                                  (element) =>\r\n                                                      element.x === props.x &&\r\n                                                      element.y === props.y\r\n                                              ),\r\n                                          ])\r\n                                      )\r\n                                    : null\r\n                            }\r\n                        />\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Maze;\r\n","import React from \"react\";\r\n\r\nclass SolveStep extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onClick = this.onClick.bind(this);\r\n        this.previous = this.previous.bind(this);\r\n        this.next = this.next.bind(this);\r\n        this.getClass = this.getClass.bind(this);\r\n    }\r\n\r\n    onClick(step) {\r\n        this.props.updateStep(step);\r\n    }\r\n\r\n    previous() {\r\n        if (this.props.step > 0) {\r\n            this.props.updateStep(this.props.step - 1);\r\n        }\r\n        if (this.props.middle > 1 && this.props.step < this.props.middle) {\r\n            this.props.updateStepButton(this.props.middle - 1);\r\n        }\r\n    }\r\n\r\n    next() {\r\n        if (this.props.step < this.props.maxStep) {\r\n            this.props.updateStep(this.props.step + 1);\r\n        }\r\n        if (\r\n            this.props.middle < this.props.maxStep - 1 &&\r\n            this.props.step > this.props.middle\r\n        ) {\r\n            this.props.updateStepButton(this.props.middle + 1);\r\n        }\r\n    }\r\n\r\n    getClass(value) {\r\n        if (this.props.step === undefined || this.props.maxStep < value) {\r\n            return \"disabled\";\r\n        } else if (this.props.step !== undefined && this.props.step === value) {\r\n            return \"active\";\r\n        } else {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <nav aria-label=\"Page navigation example\">\r\n                <ul className=\"pagination\">\r\n                    <li className=\"page-item\">\r\n                        <button className=\"page-link\" onClick={this.previous}>\r\n                            Previous\r\n                        </button>\r\n                    </li>\r\n                    <li\r\n                        className={\r\n                            \"page-item \" + this.getClass(this.props.middle - 1)\r\n                        }\r\n                    >\r\n                        <button\r\n                            className=\"page-link\"\r\n                            onClick={() => this.onClick(this.props.middle - 1)}\r\n                        >\r\n                            {this.props.step === undefined\r\n                                ? 0\r\n                                : this.props.middle - 1}\r\n                        </button>\r\n                    </li>\r\n                    <li\r\n                        className={\r\n                            \"page-item \" + this.getClass(this.props.middle)\r\n                        }\r\n                    >\r\n                        <button\r\n                            className=\"page-link\"\r\n                            onClick={() => this.onClick(this.props.middle)}\r\n                        >\r\n                            {this.props.step === undefined\r\n                                ? 1\r\n                                : this.props.middle}\r\n                        </button>\r\n                    </li>\r\n                    <li\r\n                        className={\r\n                            \"page-item \" + this.getClass(this.props.middle + 1)\r\n                        }\r\n                    >\r\n                        <button\r\n                            className=\"page-link\"\r\n                            onClick={() => this.onClick(this.props.middle + 1)}\r\n                        >\r\n                            {this.props.step === undefined\r\n                                ? 2\r\n                                : this.props.middle + 1}\r\n                        </button>\r\n                    </li>\r\n                    <li className=\"page-item\">\r\n                        <button className=\"page-link\" onClick={this.next}>\r\n                            Next\r\n                        </button>\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SolveStep;\r\n","import React from \"react\";\r\n\r\nclass Tabs extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onClick = this.onClick.bind(this);\r\n    }\r\n\r\n    onClick(id) {\r\n        this.props.selectTab(id);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ul className=\"nav nav-tabs\" id=\"myTab\" role=\"tablist\">\r\n                <li className=\"nav-item\" role=\"presentation\">\r\n                    <button\r\n                        className={\r\n                            \"nav-link\" +\r\n                            (this.props.selectedTab === \"play\" ? \" active\" : \"\")\r\n                        }\r\n                        id=\"play-tab\"\r\n                        data-bs-toggle=\"tab\"\r\n                        data-bs-target=\"#play\"\r\n                        type=\"button\"\r\n                        role=\"tab\"\r\n                        // aria-controls=\"play\"\r\n                        // aria-selected=\"true\"\r\n                        onClick={() => this.onClick(\"play\")}\r\n                    >\r\n                        Play\r\n                    </button>\r\n                </li>\r\n                <li className=\"nav-item\" role=\"presentation\">\r\n                    <button\r\n                        className={\r\n                            \"nav-link\" +\r\n                            (this.props.selectedTab === \"edit\" ? \" active\" : \"\")\r\n                        }\r\n                        id=\"edit-tab\"\r\n                        data-bs-toggle=\"tab\"\r\n                        data-bs-target=\"#edit\"\r\n                        type=\"button\"\r\n                        role=\"tab\"\r\n                        // aria-controls=\"edit\"\r\n                        // aria-selected=\"false\"\r\n                        onClick={() => this.onClick(\"edit\")}\r\n                    >\r\n                        Edit\r\n                    </button>\r\n                </li>\r\n                <li className=\"nav-item\" role=\"presentation\">\r\n                    <button\r\n                        className={\r\n                            \"nav-link\" +\r\n                            (this.props.selectedTab === \"solve\"\r\n                                ? \" active\"\r\n                                : \"\")\r\n                        }\r\n                        id=\"solve-tab\"\r\n                        data-bs-toggle=\"tab\"\r\n                        data-bs-target=\"#solve\"\r\n                        type=\"button\"\r\n                        role=\"tab\"\r\n                        onClick={() => this.onClick(\"solve\")}\r\n                    >\r\n                        Solve\r\n                    </button>\r\n                </li>\r\n            </ul>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Tabs;\r\n","import React from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\n\r\nclass Restart extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            show: false,\r\n        };\r\n\r\n        this.show = this.show.bind(this);\r\n        this.hide = this.hide.bind(this);\r\n    }\r\n\r\n    show() {\r\n        this.setState({ show: true });\r\n    }\r\n\r\n    hide() {\r\n        this.setState({ show: false });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Button variant=\"danger\" onClick={this.show}>\r\n                    Restart\r\n                </Button>\r\n\r\n                <Modal show={this.state.show} onHide={this.hide}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Restart</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>Are you sure you want to restart?</Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button\r\n                            variant=\"secondary\"\r\n                            onClick={() => {\r\n                                this.hide();\r\n                                this.props.restart();\r\n                            }}\r\n                        >\r\n                            Yes\r\n                        </Button>\r\n                        <Button variant=\"primary\" onClick={this.hide}>\r\n                            No\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Restart;\r\n","import React from \"react\";\r\n\r\nexport const levels = [\r\n    `S3 3  53 65 4\r\n    1  5  63 15 7\r\n    3  73 3  51 4\r\n    1  5  64 2  4\r\n    02 1  62 7  G`,\r\n    `SR3 2 53 6 G\r\n    1 5 65 2 7\r\n    4 73 1 17 7\r\n    3 1 53 0 40\r\n    1 62 1 1 R6`,\r\n];\r\n\r\nexport const exampleMaze = `432R G  5Y\r\n0   0  5\r\nS02  2  0`;\r\n\r\nexport class Levels extends React.Component {\r\n    render() {\r\n        return (\r\n            <div\r\n                className=\"btn-group mr-2 mb-4\"\r\n                role=\"group\"\r\n                aria-label=\"First group\"\r\n            >\r\n                {levels.map((element, index) => (\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-outline-primary\"\r\n                        onClick={() => this.props.loadMaze(element)}\r\n                    >\r\n                        {index + 1}\r\n                    </button>\r\n                ))}\r\n                {/* <button type=\"button\" className=\"btn btn-outline-primary\">\r\n                    1\r\n                </button>\r\n                <button type=\"button\" className=\"btn btn-outline-primary\">\r\n                    2\r\n                </button>\r\n                <button type=\"button\" className=\"btn btn-outline-primary\">\r\n                    3\r\n                </button>\r\n                <button type=\"button\" className=\"btn btn-outline-primary\">\r\n                    4\r\n                </button> */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// export default Levels;\r\n","import React from \"react\";\nimport CellType from \"./CellType\";\nimport { Colors, ColorButtons } from \"./Color\";\nimport SolveButton from \"./SolveButton\";\nimport SizeChanger from \"./SizeChanger\";\nimport TypeButtons from \"./TypeButtons\";\nimport ArrowBoxes from \"./ArrowBoxes\";\nimport SaveButton from \"./SaveButton\";\nimport LoadButton from \"./LoadButton\";\nimport Maze from \"./Maze\";\nimport SolveStep from \"./SolveStep\";\nimport Tabs from \"./Tabs\";\nimport { Modal } from \"bootstrap\";\nimport directions from \"./Directions\";\nimport Restart from \"./Restart\";\nimport { exampleMaze, Levels } from \"./Levels\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: [\n                {\n                    x: 0,\n                    y: 0,\n                    cellType: CellType.NORMAL,\n                    color: Colors.BLACK,\n                    arrows: [],\n                },\n            ],\n            size: 4,\n            selectedCell: 0,\n            solvedSteps: null,\n            stepButton: 1,\n            selectedTab: \"play\",\n            playedSteps: [[0, 0]],\n            playedStep: 0,\n            // playedButton: 1,\n            solvedModal: new Modal(document.getElementById(\"solvedModal\")),\n            noSolutionModal: new Modal(\n                document.getElementById(\"noSolutionModal\")\n            ),\n        };\n        // for (let y = 0; y < this.state.size; y++) {\n        //     for (let x = 0; x < this.state.size; x++) {\n        //         let arrows;\n        //         do {\n        //             arrows = [];\n        //             for (let i = 0; i < 8; i++) {\n        //                 if (Math.random() <= 1 / 8.0) {\n        //                     arrows.push(i);\n        //                 }\n        //             }\n        //         } while (arrows.length === 0);\n        //         this.state.data.push({\n        //             x: x,\n        //             y: y,\n        //             cellType: CellType.NORMAL,\n        //             color: getRandomColor(),\n        //             arrows: arrows,\n        //         });\n        //     }\n        // }\n        // this.state.data[0].cellType = CellType.START;\n        // this.state.data[this.state.data.length - 1].cellType = CellType.GOAL;\n\n        this.newCell = this.newCell.bind(this);\n        this.loadMaze = this.loadMaze.bind(this);\n        this.updateSize = this.updateSize.bind(this);\n        this.updateSelected = this.updateSelected.bind(this);\n        this.updateColor = this.updateColor.bind(this);\n        this.updateCellType = this.updateCellType.bind(this);\n        this.updateArrow = this.updateArrow.bind(this);\n        this.setSolution = this.setSolution.bind(this);\n        this.updateStep = this.updateStep.bind(this);\n        this.updateStepButton = this.updateStepButton.bind(this);\n        this.updatePlayedStep = this.updatePlayedStep.bind(this);\n        this.updatePlayedButton = this.updatePlayedButton.bind(this);\n        this.setSelectedTab = this.setSelectedTab.bind(this);\n        this.setupPlay = this.setupPlay.bind(this);\n        this.getAdjacentCells = this.getAdjacentCells.bind(this);\n\n        // this.setupPlay();\n        setTimeout(() => this.loadMaze(exampleMaze), 1); //lol or else it crashes\n\n        document\n            .querySelector(\":root\")\n            .style.setProperty(\"--size\", this.state.size);\n    }\n\n    setupPlay() {\n        const index = this.state.data.findIndex(\n            (element) => element.cellType === CellType.START\n        );\n        let stepSize;\n        if (this.state.data[index].color === Colors.RED) {\n            stepSize = 2;\n        } else if (this.state.data[index].color === Colors.YELLOW) {\n            stepSize = 0;\n        } else {\n            stepSize = 1;\n        }\n        this.setState({\n            selectedCell: index,\n            // stepSize: stepSize,\n            playedSteps: [[index, stepSize]],\n            playedStep: 0,\n            playedButton: 1,\n        });\n    }\n\n    loadMaze(maze) {\n        console.log(\"load maze\");\n        let size = null;\n        let rows = 1;\n        const data = [];\n        for (const line of maze.split(\"\\n\")) {\n            const row = line.trim().split(/ +/);\n            if (size === null) {\n                size = row.length;\n            } else if (!row[0].startsWith(\"#\")) {\n                rows++;\n            }\n\n            //TODO row.length !== size, should throw error\n            for (let x = 0; x < row.length; x++) {\n                const cell = row[x].replace(\"\\r\", \"\");\n                const cellData = this.newCell(x, rows - 1);\n                let doArrows = true;\n                if (cell.includes(\"S\")) {\n                    cellData.cellType = CellType.START;\n                } else if (cell.includes(\"G\")) {\n                    cellData.cellType = CellType.GOAL;\n                    doArrows = false;\n                } else {\n                    cellData.cellType = CellType.NORMAL;\n                }\n                if (doArrows) {\n                    if (cell.includes(\"R\")) {\n                        cellData.color = Colors.RED;\n                    } else if (cell.includes(\"Y\")) {\n                        cellData.color = Colors.YELLOW;\n                    }\n                    cellData.arrows = cell\n                        .split(\"\")\n                        .filter((element) => !isNaN(element))\n                        .map((element) => parseInt(element));\n                }\n                data.push(cellData);\n            }\n\n            // console.log(row);\n            if (rows === size) {\n                break;\n            }\n        }\n        this.setState(\n            {\n                data: data,\n                size: size,\n                solvedSteps: null,\n                stepButton: 1,\n                playedSteps: [[0, 0]],\n                playedStep: 0,\n            },\n            () => this.setupPlay()\n        );\n        // this.setupPlay();\n    }\n\n    updateSize(size) {\n        this.setState((state) => {\n            let data;\n            if (size < state.size) {\n                data = state.data.filter(\n                    (element) => element.x < size && element.y < size\n                );\n            } else if (size > state.size) {\n                data = [];\n                for (const cell of state.data) {\n                    data.push(cell);\n                    if (cell.x + 1 === state.size) {\n                        for (let i = 1; i < size - cell.x; i++) {\n                            data.push(this.newCell(cell.x + i, cell.y));\n                        }\n                    }\n                }\n                for (let j = 0; j < size - state.size; j++) {\n                    for (let i = 0; i < size; i++) {\n                        data.push(this.newCell(i, size - 1));\n                    }\n                }\n            } else {\n                data = state.data;\n            }\n            return { size: size, data: data, selectedCell: null };\n        });\n    }\n\n    newCell(x, y) {\n        return {\n            x: x,\n            y: y,\n            cellType: CellType.NORMAL,\n            color: Colors.BLACK,\n            arrows: [],\n        };\n    }\n\n    updateSelected(x, y) {\n        if (this.state.selectedTab === \"play\") {\n            const findCell = this.getAdjacentCells(\n                ...this.state.playedSteps[this.state.playedStep]\n            ).find((element) => element.x === x && element.y === y);\n            if (findCell === undefined) {\n                return;\n            } else if (findCell.cellType === CellType.GOAL) {\n                this.state.solvedModal.show();\n            }\n        }\n        this.setState((state) => {\n            const index = y * state.size + x;\n            let stepSize = state.stepSize;\n            if (this.state.selectedTab === \"play\") {\n                stepSize = this.state.playedSteps[this.state.playedStep][1];\n                if (this.state.data[index].color === Colors.RED) {\n                    stepSize++;\n                } else if (this.state.data[index].color === Colors.YELLOW) {\n                    stepSize--;\n                }\n            }\n            return {\n                selectedCell: state.selectedCell === index ? null : index,\n                // stepSize: stepSize,\n                playedSteps:\n                    state.playedStep + 1 >= state.playedSteps.length\n                        ? [...state.playedSteps, [index, stepSize]]\n                        : [\n                              ...state.playedSteps.slice(\n                                  0,\n                                  state.playedStep + 1\n                              ),\n                              [index, stepSize],\n                              //   ...state.playedSteps.slice(state.playedStep + 2),\n                          ],\n                playedStep:\n                    // state.playedStep === state.playedSteps.length - 1\n                    state.playedStep + 1,\n                // : state.playedStep,\n                playedButton:\n                    state.playedStep > state.playedButton\n                        ? state.playedButton + 1\n                        : state.playedButton,\n            };\n        });\n    }\n\n    getAdjacentCells(index, stepSize) {\n        const cell = this.state.data[index];\n        const adjacents = [];\n        for (const arrow of cell.arrows) {\n            const neighbor_x = cell.x + directions[arrow][0] * stepSize;\n            const neighbor_y = cell.y + directions[arrow][1] * stepSize;\n            if (\n                neighbor_x >= 0 &&\n                neighbor_x < this.state.size &&\n                neighbor_y >= 0 &&\n                neighbor_y < this.state.size\n            ) {\n                const adjacentCell =\n                    this.state.data[neighbor_y * this.state.size + neighbor_x];\n                if (\n                    !(\n                        adjacentCell.arrows.length === 0 &&\n                        adjacentCell.cellType === CellType.NORMAL\n                    )\n                ) {\n                    adjacents.push(adjacentCell);\n                }\n            }\n        }\n        return adjacents;\n    }\n\n    updateColor(color) {\n        this.updateCell(function (prev, cell) {\n            cell.color = color;\n        });\n    }\n\n    updateCellType(type) {\n        this.updateCell(function (prev, cell) {\n            cell.cellType = type;\n        });\n    }\n\n    updateArrow(arrow, add) {\n        this.updateCell(function (prev, cell) {\n            if (add) {\n                cell.arrows = [...prev.arrows, arrow];\n            } else {\n                cell.arrows = prev.arrows.filter(\n                    (element) => element !== arrow\n                );\n            }\n        });\n    }\n\n    updateCell(edit) {\n        this.setState((state) => {\n            const index = state.selectedCell;\n            const cell = { ...state.data[index] };\n            edit(state.data[index], cell);\n            return {\n                data: [\n                    ...state.data.slice(0, index),\n                    cell,\n                    ...state.data.slice(index + 1),\n                ],\n            };\n        });\n    }\n\n    setSolution(solvedSteps, solution) {\n        if (solution === undefined) {\n            this.state.noSolutionModal.show();\n        } else {\n            this.setState({\n                solvedSteps: solvedSteps,\n                solution: solution,\n                step: solution.length - 1,\n                stepButton: Math.max(solution.length - 2, 1),\n            });\n        }\n    }\n\n    updateStep(step) {\n        if (step < this.state.solution.length) {\n            this.setState({ step: step });\n        }\n    }\n\n    updateStepButton(step) {\n        this.setState({ stepButton: step });\n    }\n\n    updatePlayedStep(step) {\n        if (step < this.state.playedSteps.length) {\n            this.setState({\n                playedStep: step,\n                selectedCell: this.state.playedSteps[step][0],\n            });\n        }\n    }\n\n    updatePlayedButton(step) {\n        this.setState({ playedButton: step });\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.size !== this.state.size) {\n            document\n                .querySelector(\":root\")\n                .style.setProperty(\"--size\", this.state.size);\n        }\n    }\n\n    setSelectedTab(tab) {\n        this.setState({ selectedTab: tab });\n    }\n\n    render() {\n        const selected =\n            this.state.selectedCell === null\n                ? null\n                : this.state.data[this.state.selectedCell];\n        let tabContent;\n        if (this.state.selectedTab === \"play\") {\n            tabContent = (\n                <>\n                    <p>\n                        {\"Step size: \" +\n                            this.state.playedSteps[this.state.playedStep][1]}\n                    </p>\n                    <SolveStep\n                        step={this.state.playedStep}\n                        maxStep={this.state.playedSteps.length - 1}\n                        updateStep={this.updatePlayedStep}\n                        middle={this.state.playedButton}\n                        updateStepButton={this.updatePlayedButton}\n                    />\n                    <Restart restart={this.setupPlay} />\n                    <div class=\"alert alert-info mt-3\" role=\"alert\">\n                        Your current position is outlined in green. Click on a\n                        green square to move onto it. Squares that you have\n                        visited already will be in turquoise. <br />\n                        <br />\n                        The pagination allows you to navigate between the moves\n                        you have made. You can select a previously made move and\n                        change it by selecting a different square. Note that\n                        this will erase all subsequent moves from that point.\n                    </div>\n                </>\n            );\n        } else if (this.state.selectedTab === \"edit\") {\n            tabContent = (\n                <>\n                    <SizeChanger\n                        size={this.state.size}\n                        updateSize={this.updateSize}\n                    />\n                    <hr />\n                    <TypeButtons\n                        selected={selected}\n                        updateCellType={this.updateCellType}\n                    />\n                    <hr />\n                    <ColorButtons\n                        selected={selected}\n                        updateColor={this.updateColor}\n                    />\n                    <hr />\n                    <ArrowBoxes\n                        selected={selected}\n                        updateArrow={this.updateArrow}\n                    />\n                    <hr />\n                    <SaveButton data={this.state.data} size={this.state.size} />\n                </>\n            );\n        } else {\n            tabContent = (\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <SolveButton\n                            maze={this.state.data}\n                            size={this.state.size}\n                            setSolution={this.setSolution}\n                        />\n                    </div>\n                    {this.state.solvedSteps !== null ? (\n                        <div className=\"col\">\n                            <SolveStep\n                                step={this.state.step}\n                                maxStep={Math.max(\n                                    this.state.solution.length - 1,\n                                    2\n                                )}\n                                updateStep={this.updateStep}\n                                middle={this.state.stepButton}\n                                updateStepButton={this.updateStepButton}\n                            />\n                        </div>\n                    ) : (\n                        \"\"\n                    )}\n                </div>\n            );\n        }\n        return (\n            <div>\n                <h3>Select a Maze</h3>\n                <p>\n                    The following 20 mazes are from Robert Abbott's original\n                    website:\n                </p>\n                <Levels loadMaze={this.loadMaze} />\n                <div className=\"row\">\n                    <div className=\"col-3\">\n                        <p>You can also choose to upload your own maze:</p>\n                    </div>\n                    <div className=\"col\">\n                        <LoadButton loadMaze={this.loadMaze} />\n                    </div>\n                </div>\n                <div className=\"row mb-4\">\n                    <Tabs\n                        selectTab={this.setSelectedTab}\n                        selectedTab={this.state.selectedTab}\n                    />\n                </div>\n                <div className=\"row\">\n                    <div className=\"col justify-content-center\">\n                        <Maze\n                            data={this.state.data}\n                            updateSelected={this.updateSelected}\n                            selected={this.state.selectedCell}\n                            queue={\n                                this.state.solvedSteps === null ||\n                                this.state.selectedTab !== \"solve\"\n                                    ? null\n                                    : this.state.solvedSteps[this.state.step]\n                                          .queue\n                            }\n                            solution={\n                                this.state.solvedSteps === null ||\n                                this.state.selectedTab !== \"solve\"\n                                    ? null\n                                    : this.state.solution\n                            }\n                            playedSteps={\n                                this.state.selectedTab === \"play\"\n                                    ? this.state.playedSteps\n                                    : null\n                            }\n                            playedStep={this.state.playedStep}\n                            adjacents={\n                                this.state.selectedTab === \"play\" &&\n                                this.state.playedSteps.length > 0\n                                    ? this.getAdjacentCells(\n                                          ...this.state.playedSteps[\n                                              this.state.playedStep\n                                          ]\n                                      )\n                                    : null\n                            }\n                        />\n                    </div>\n                    <div className=\"col\">{tabContent}</div>\n                </div>\n            </div>\n        );\n    }\n}\n\n// ReactDOM.render(<App />, document.getElementById(\"root\"));\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}